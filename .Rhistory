gplatesPaths <- macDefaultGPlates()
gplatesExecutable <- paste(gplatesPaths, collapse="/")
# what the user would have entered
path.gplates <- gplatesExecutable
# leave the model intact in the namespace (easier debug)
rotation <- model@rotation
platePolygons <- model@polygons
# separator character between directories
dirSep <- "/"
}
# look for given path
}else{
# separate to form a length 2 vector
gplatesExecutable <- path.gplates
# leave the model intact in the namespace (easier debug)
rotation <- model@rotation
platePolygons <- model@polygons
# separator character between directories
dirSep <- "/"
# windows needs special treatment
if(os=="windows"){
# system call to executable
gplatesExecutable <- paste("\"", path.gplates, "\"", sep="")
# 2. replace model paths with \\
rotation <- gsub("/","\\\\", model@rotation)
platePolygons <- gsub("/","\\\\", model@polygons)
# characters to include directory
dirSep <- "\\\\"
}
}
# C. one moretest whether gplates was detected or not
gpTest <- testGPlates(gplatesExecutable, verbose=verbose)
# if gplates is not present:
if(!gpTest) stop(paste("The GPlates executable\n	\"", path.gplates,"\"\nwas not found.", sep=""))
# 2. Setup reconstruction environment
# folder where files will be executed
if(is.null(dir)) tempd <- tempdir() else tempd <- dir
# prepare x
# create a SpatialPointsDataFrame from long-lat matrix
if("matrix"%in%class(x) | "data.frame"%in%class(x)){
spPoints<- sp::SpatialPoints(x)
spPoints@proj4string <- sp::CRS("+proj=longlat")
xTransform <- sp::SpatialPointsDataFrame(spPoints, data=data.frame(a=1:nrow(x)))
}
# if originally a SpatialPointsDataFrame
if("SpatialPointsDataFrame"%in%class(x)){
if(!is.na(x@proj4string)){
xTransform <- sp::spTransform(x, sp::CRS("+proj=longlat"))
}else{
x@proj4string <- sp::CRS("+proj=longlat")
xTransform <- x
}
}
# if originally a SpatialPointsDataFrame
if("SpatialPolygonsDataFrame"%in%class(x) | "SpatialLinesDataFrame"%in%class(x)){
xTransform <- x
}
# in case stat
if(!is.character(x)){
# write 'x' as a shapefile
layer<- paste(randomString(length=3), age, sep="_")
if(verbose) message(paste("Exported data identified as ", layer))
pathToFileNoEXT <- paste(tempd, "/", layer,sep="")
if(verbose) message("Exporting 'x' as a shapefile.")
rgdal::writeOGR(xTransform, dsn=paste(pathToFileNoEXT, ".shp", sep=""), layer=layer, driver="ESRI Shapefile")
}else{
# feature to reconstruct is the static polygons
if(length(x)!=1) stop("Only the 'plates' can be reconstructed with this method.")
if(x=="plates"){
# use original one - even for windows.
pathToFileNoEXT <- gsub(".gpml", "",model@polygons)
}
}
# inheritance of appearance and disappearance dates
if(plateperiod){
pPer <- 1
}else{
pPer <- 0
}
# 3. Execute GPlates commands
# convert to gpml
if(!is.character(x)){
if(verbose) message("Converting shapefile to .gpml.")
conversion <- paste(gplatesExecutable, " convert-file-format -l ",pathToFileNoEXT,".shp -e gpml", sep="")
system(conversion, ignore.stdout=!verbose,ignore.stderr=!verbose)
}
# do the plate assignment
if(!is.character(x)){
if(verbose) message("Assigning plate IDs to .gpml file.")
assignment <- paste(gplatesExecutable, " assign-plate-ids -e ",pPer," -p ", platePolygons, " -l ",pathToFileNoEXT,".gpml", sep="")
system(assignment, ignore.stdout=!verbose,ignore.stderr=!verbose)
}
# do reconstruction
if(!is.character(x)) if(verbose) message("Reconstructing coordinates.")
if(is.character(x)) if(x=="plates") if(verbose) message("Reconstructing plates.")
reconstruction <- paste(gplatesExecutable, " reconstruct -l ",pathToFileNoEXT,".gpml -r ",
rotation, " -e shapefile -t ", age, " -o ", pathToFileNoEXT,"_reconstructed -w 1", sep="")
system(reconstruction, ignore.stdout=!verbose,ignore.stderr=!verbose)
# 4. Processing output
# reading coordinates
if(!is.character(x)){
if(verbose) message("Reading reconstructed coordinates.")
somethingDF <- rgdal::readOGR(paste(pathToFileNoEXT,"_reconstructed.shx",	sep=""), verbose=verbose)
}
if(is.character(x)){
if(x=="plates") if(verbose) message("Reading plates.")
pathToFile <- paste(pathToFileNoEXT,"_reconstructed",dirSep ,fileFromPath(pathToFileNoEXT),"_reconstructed_polygon.shx", sep="")
somethingDF <- rgdal::readOGR(pathToFile, verbose=verbose)
}
# transform object back to whatever it was
if("matrix"%in%class(x) | "data.frame"%in%class(x)){
# some coordinates probably were missing
rotated <- x
rotated <- matrix(NA, ncol=2, nrow=nrow(x))
colnames(rotated) <- colnames(x)
rownames(rotated) <- rownames(x)
rotated[somethingDF@data$a,]  <- somethingDF@coords
}
if(
"SpatialPolygonsDataFrame"%in%class(x) |
"SpatialPointsDataFrame"%in%class(x) |
"SpatialLinesDataFrame"%in%class(x) |
"character"%in%class(x)){
rotated <- somethingDF
}
# 5. Finish
# remove temporary files
if(!"character"%in%class(x)){
if(cleanup){
system(paste("rm ",tempd, "/",layer,"*", sep=""))
}
}
return(rotated)
}
coords <-   reconstructGPlates(x = uniq[i, c("long", "lat")], #coordinate sof data
age= uniq$rounded_age[i], #age of data
model=pm, #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = TRUE) # directory of gplates
reconstructGPlates <- function(x, age, model, path.gplates=NULL,dir=NULL, verbose=FALSE, cleanup=TRUE, plateperiod=FALSE){
if(class(model)!="platemodel") stop("You need a GPlates tectonic model for this method.")
if(! requireNamespace("rgdal", quietly=TRUE)) stop("This method requires the 'rgdal' package to run")
# 1. FIND GPlates
# A. get operating system
os <- "windows"
# B. should the program look for a default path for gplates?
if(is.null(path.gplates)){
# depending on the os
if(os=="windows"){
# 1. find GPLATES exectutable if possible
# directory and executable
gplatesPaths <- winDefaultGPlates()
#path to executable
path.gplates <- paste(gplatesPaths, collapse="/")
# system call to executable
gplatesExecutable <- paste("\"", path.gplates, "\"", sep="")
# 2. replace model paths with \\
rotation <- gsub("/","\\\\", model@rotation)
platePolygons <- gsub("/","\\\\", model@polygons)
# characters to include directory
dirSep <- "\\\\"
}
# windows needs special treatment
if(os=="windows"){
# system call to executable
gplatesExecutable <- paste("\"", path.gplates, "\"", sep="")
# 2. replace model paths with \\
rotation <- gsub("/","\\\\", model@rotation)
platePolygons <- gsub("/","\\\\", model@polygons)
# characters to include directory
dirSep <- "\\\\"
}
}
# C. one moretest whether gplates was detected or not
gpTest <- testGPlates(gplatesExecutable, verbose=verbose)
# if gplates is not present:
if(!gpTest) stop(paste("The GPlates executable\n	\"", path.gplates,"\"\nwas not found.", sep=""))
# 2. Setup reconstruction environment
# folder where files will be executed
if(is.null(dir)) tempd <- tempdir() else tempd <- dir
# prepare x
# create a SpatialPointsDataFrame from long-lat matrix
if("matrix"%in%class(x) | "data.frame"%in%class(x)){
spPoints<- sp::SpatialPoints(x)
spPoints@proj4string <- sp::CRS("+proj=longlat")
xTransform <- sp::SpatialPointsDataFrame(spPoints, data=data.frame(a=1:nrow(x)))
}
# if originally a SpatialPointsDataFrame
if("SpatialPointsDataFrame"%in%class(x)){
if(!is.na(x@proj4string)){
xTransform <- sp::spTransform(x, sp::CRS("+proj=longlat"))
}else{
x@proj4string <- sp::CRS("+proj=longlat")
xTransform <- x
}
}
# if originally a SpatialPointsDataFrame
if("SpatialPolygonsDataFrame"%in%class(x) | "SpatialLinesDataFrame"%in%class(x)){
xTransform <- x
}
# in case stat
if(!is.character(x)){
# write 'x' as a shapefile
layer<- paste(randomString(length=3), age, sep="_")
if(verbose) message(paste("Exported data identified as ", layer))
pathToFileNoEXT <- paste(tempd, "/", layer,sep="")
if(verbose) message("Exporting 'x' as a shapefile.")
rgdal::writeOGR(xTransform, dsn=paste(pathToFileNoEXT, ".shp", sep=""), layer=layer, driver="ESRI Shapefile")
}else{
# feature to reconstruct is the static polygons
if(length(x)!=1) stop("Only the 'plates' can be reconstructed with this method.")
if(x=="plates"){
# use original one - even for windows.
pathToFileNoEXT <- gsub(".gpml", "",model@polygons)
}
}
# inheritance of appearance and disappearance dates
if(plateperiod){
pPer <- 1
}else{
pPer <- 0
}
# 3. Execute GPlates commands
# convert to gpml
if(!is.character(x)){
if(verbose) message("Converting shapefile to .gpml.")
conversion <- paste(gplatesExecutable, " convert-file-format -l ",pathToFileNoEXT,".shp -e gpml", sep="")
system(conversion, ignore.stdout=!verbose,ignore.stderr=!verbose)
}
# do the plate assignment
if(!is.character(x)){
if(verbose) message("Assigning plate IDs to .gpml file.")
assignment <- paste(gplatesExecutable, " assign-plate-ids -e ",pPer," -p ", platePolygons, " -l ",pathToFileNoEXT,".gpml", sep="")
system(assignment, ignore.stdout=!verbose,ignore.stderr=!verbose)
}
# do reconstruction
if(!is.character(x)) if(verbose) message("Reconstructing coordinates.")
if(is.character(x)) if(x=="plates") if(verbose) message("Reconstructing plates.")
reconstruction <- paste(gplatesExecutable, " reconstruct -l ",pathToFileNoEXT,".gpml -r ",
rotation, " -e shapefile -t ", age, " -o ", pathToFileNoEXT,"_reconstructed -w 1", sep="")
system(reconstruction, ignore.stdout=!verbose,ignore.stderr=!verbose)
# 4. Processing output
# reading coordinates
if(!is.character(x)){
if(verbose) message("Reading reconstructed coordinates.")
somethingDF <- rgdal::readOGR(paste(pathToFileNoEXT,"_reconstructed.shx",	sep=""), verbose=verbose)
}
if(is.character(x)){
if(x=="plates") if(verbose) message("Reading plates.")
pathToFile <- paste(pathToFileNoEXT,"_reconstructed",dirSep ,fileFromPath(pathToFileNoEXT),"_reconstructed_polygon.shx", sep="")
somethingDF <- rgdal::readOGR(pathToFile, verbose=verbose)
}
# transform object back to whatever it was
if("matrix"%in%class(x) | "data.frame"%in%class(x)){
# some coordinates probably were missing
rotated <- x
rotated <- matrix(NA, ncol=2, nrow=nrow(x))
colnames(rotated) <- colnames(x)
rownames(rotated) <- rownames(x)
rotated[somethingDF@data$a,]  <- somethingDF@coords
}
if(
"SpatialPolygonsDataFrame"%in%class(x) |
"SpatialPointsDataFrame"%in%class(x) |
"SpatialLinesDataFrame"%in%class(x) |
"character"%in%class(x)){
rotated <- somethingDF
}
# 5. Finish
# remove temporary files
if(!"character"%in%class(x)){
if(cleanup){
system(paste("rm ",tempd, "/",layer,"*", sep=""))
}
}
return(rotated)
}
coords <-   reconstructGPlates(x = uniq[i, c("long", "lat")], #coordinate sof data
age= uniq$rounded_age[i], #age of data
model=pm, #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = TRUE) # directory of gplates
reconstructGPlates <- function(x, age, model, path.gplates=NULL,dir=NULL, verbose=FALSE, cleanup=TRUE, plateperiod=FALSE){
if(class(model)!="platemodel") stop("You need a GPlates tectonic model for this method.")
if(! requireNamespace("rgdal", quietly=TRUE)) stop("This method requires the 'rgdal' package to run")
# 1. FIND GPlates
# A. get operating system
os <- "windows"
# B. should the program look for a default path for gplates?
if(is.null(path.gplates)){
# depending on the os
if(os=="windows"){
# 1. find GPLATES exectutable if possible
# directory and executable
gplatesPaths <- winDefaultGPlates()
#path to executable
path.gplates <- paste(gplatesPaths, collapse="/")
# system call to executable
gplatesExecutable <- paste("\"", path.gplates, "\"", sep="")
# 2. replace model paths with \\
rotation <- gsub("/","\\\\", model@rotation)
platePolygons <- gsub("/","\\\\", model@polygons)
# characters to include directory
dirSep <- "\\\\"
}
# windows needs special treatment
if(os=="windows"){
# system call to executable
gplatesExecutable <- paste("\"", path.gplates, "\"", sep="")
# 2. replace model paths with \\
rotation <- gsub("/","\\\\", model@rotation)
platePolygons <- gsub("/","\\\\", model@polygons)
# characters to include directory
dirSep <- "\\\\"
}
}
# 2. Setup reconstruction environment
# folder where files will be executed
if(is.null(dir)) tempd <- tempdir() else tempd <- dir
# prepare x
# create a SpatialPointsDataFrame from long-lat matrix
if("matrix"%in%class(x) | "data.frame"%in%class(x)){
spPoints<- sp::SpatialPoints(x)
spPoints@proj4string <- sp::CRS("+proj=longlat")
xTransform <- sp::SpatialPointsDataFrame(spPoints, data=data.frame(a=1:nrow(x)))
}
# if originally a SpatialPointsDataFrame
if("SpatialPointsDataFrame"%in%class(x)){
if(!is.na(x@proj4string)){
xTransform <- sp::spTransform(x, sp::CRS("+proj=longlat"))
}else{
x@proj4string <- sp::CRS("+proj=longlat")
xTransform <- x
}
}
# if originally a SpatialPointsDataFrame
if("SpatialPolygonsDataFrame"%in%class(x) | "SpatialLinesDataFrame"%in%class(x)){
xTransform <- x
}
# in case stat
if(!is.character(x)){
# write 'x' as a shapefile
layer<- paste(randomString(length=3), age, sep="_")
if(verbose) message(paste("Exported data identified as ", layer))
pathToFileNoEXT <- paste(tempd, "/", layer,sep="")
if(verbose) message("Exporting 'x' as a shapefile.")
rgdal::writeOGR(xTransform, dsn=paste(pathToFileNoEXT, ".shp", sep=""), layer=layer, driver="ESRI Shapefile")
}else{
# feature to reconstruct is the static polygons
if(length(x)!=1) stop("Only the 'plates' can be reconstructed with this method.")
if(x=="plates"){
# use original one - even for windows.
pathToFileNoEXT <- gsub(".gpml", "",model@polygons)
}
}
# inheritance of appearance and disappearance dates
if(plateperiod){
pPer <- 1
}else{
pPer <- 0
}
# 3. Execute GPlates commands
# convert to gpml
if(!is.character(x)){
if(verbose) message("Converting shapefile to .gpml.")
conversion <- paste(gplatesExecutable, " convert-file-format -l ",pathToFileNoEXT,".shp -e gpml", sep="")
system(conversion, ignore.stdout=!verbose,ignore.stderr=!verbose)
}
# do the plate assignment
if(!is.character(x)){
if(verbose) message("Assigning plate IDs to .gpml file.")
assignment <- paste(gplatesExecutable, " assign-plate-ids -e ",pPer," -p ", platePolygons, " -l ",pathToFileNoEXT,".gpml", sep="")
system(assignment, ignore.stdout=!verbose,ignore.stderr=!verbose)
}
# do reconstruction
if(!is.character(x)) if(verbose) message("Reconstructing coordinates.")
if(is.character(x)) if(x=="plates") if(verbose) message("Reconstructing plates.")
reconstruction <- paste(gplatesExecutable, " reconstruct -l ",pathToFileNoEXT,".gpml -r ",
rotation, " -e shapefile -t ", age, " -o ", pathToFileNoEXT,"_reconstructed -w 1", sep="")
system(reconstruction, ignore.stdout=!verbose,ignore.stderr=!verbose)
# 4. Processing output
# reading coordinates
if(!is.character(x)){
if(verbose) message("Reading reconstructed coordinates.")
somethingDF <- rgdal::readOGR(paste(pathToFileNoEXT,"_reconstructed.shx",	sep=""), verbose=verbose)
}
if(is.character(x)){
if(x=="plates") if(verbose) message("Reading plates.")
pathToFile <- paste(pathToFileNoEXT,"_reconstructed",dirSep ,fileFromPath(pathToFileNoEXT),"_reconstructed_polygon.shx", sep="")
somethingDF <- rgdal::readOGR(pathToFile, verbose=verbose)
}
# transform object back to whatever it was
if("matrix"%in%class(x) | "data.frame"%in%class(x)){
# some coordinates probably were missing
rotated <- x
rotated <- matrix(NA, ncol=2, nrow=nrow(x))
colnames(rotated) <- colnames(x)
rownames(rotated) <- rownames(x)
rotated[somethingDF@data$a,]  <- somethingDF@coords
}
if(
"SpatialPolygonsDataFrame"%in%class(x) |
"SpatialPointsDataFrame"%in%class(x) |
"SpatialLinesDataFrame"%in%class(x) |
"character"%in%class(x)){
rotated <- somethingDF
}
# 5. Finish
# remove temporary files
if(!"character"%in%class(x)){
if(cleanup){
system(paste("rm ",tempd, "/",layer,"*", sep=""))
}
}
return(rotated)
}
coords <-   reconstructGPlates(x = uniq[i, c("long", "lat")], #coordinate sof data
age= uniq$rounded_age[i], #age of data
model=pm, #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = TRUE) # directory of gplates
?reconstruct
files <- list.files("./data/", full.names = TRUE)
files <- files[files != c("./data/StabIsoDB.csv")]
files <- files[files != c("./data/layers")]
do.call(file.remove, list(files))
coords <-   reconstruct(x = SpatialPoints(uniq[i, c("long", "lat")]), #coordinate sof data
age= uniq$rounded_age[i], #age of data
model=pm, #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = TRUE) # directory of gplates
coords <-   reconstruct(x = as.matrix(uniq[i, c("long", "lat")]), #coordinate sof data
age= uniq$rounded_age[i], #age of data
model=pm, #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = TRUE) # directory of gplates
coords <-   reconstruct(x = SpatialPoints(uniq[i, c("long", "lat")]), #coordinate sof data
age= uniq$rounded_age[i], #age of data
model=pm, #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = TRUE) # directory of gplates
coords <-   reconstruct(x = SpatialPolygons(uniq[i, c("long", "lat")]), #coordinate sof data
age= uniq$rounded_age[i], #age of data
model=pm, #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = TRUE) # directory of gplates
coords <-   reconstruct(x = (uniq[i, c("long", "lat")]), #coordinate sof data
age= uniq$rounded_age[i], #age of data
model=pm, #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = TRUE) # directory of gplates
coords <-   reconstruct(x = cbind(uniq[i, c("long", "lat")]), #coordinate sof data
age= uniq$rounded_age[i], #age of data
model=pm, #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = TRUE) # directory of gplates
coords <-   reconstruct(x = (uniq[i, c("long", "lat")]), #coordinate sof data
age= uniq$rounded_age[i], #age of data
model="PALEOMAP", #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = TRUE) # directory of gplates
coords
i <- 100
coords <-   reconstruct(x = (uniq[i, c("long", "lat")]), #coordinate sof data
age= uniq$rounded_age[i], #age of data
model="PALEOMAP", #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = TRUE) # directory of gplates
coords
coords <-   reconstruct(x = (uniq[i, c("long", "lat")]), #coordinate sof data
age= uniq$rounded_age[i], #age of data
model=pm, #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = FALSE) # directory of gplates
#palaeorotate coordinates
pm <- fetch("paleomap", "model", datadir="./data/") #download plate model
coords <-   reconstruct(x = (uniq[i, c("long", "lat")]), #coordinate sof data
age= uniq$rounded_age[i], #age of data
model=pm, #plate model
#dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = FALSE) # directory of gplates
#palaeorotate coordinates
pm <- fetch("paleomap", "model") #download plate model
coords <-   reconstruct(x = (uniq[i, c("long", "lat")]), #coordinate sof data
age= uniq$rounded_age[i], #age of data
model=pm, #plate model
#dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = FALSE) # directory of gplates
library(chronosphere)
coords <-   reconstruct(x = (uniq[i, c("long", "lat")]), #coordinate sof data
age= uniq$rounded_age[i], #age of data
model=pm, #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = FALSE) # directory of gplates
remove.packages("chronosphere", lib="~/R/win-library/4.0")
install.packages("devtools")
install.packages("https://github.com/chronosphere-portal/r_package/blob/master/_archive/bin/win_x86-x64/chronosphere_0.1.12-51.zip")
