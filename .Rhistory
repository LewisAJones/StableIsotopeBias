p1 + guides(fill = guide_legend(nrow = 1))
p1 <- ggplot() +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -105, ymax= Inf), linetype = 0, color="grey90", alpha=0.1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -105, ymax = -90), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -97.5, label = abbrev), colour = "black", alpha=1)  +
geom_point(data = data, mapping=aes(x = gts2012, y = palaeolat, fill = continent), shape = 21, colour = "black", size = 1.5, alpha  = 0.75) +
#geom_point(data = stage_vals, mapping=aes(x = mid_ma, y = temperature_stage), colour = "black", size = 1.1, alpha  = 1) +
#geom_line(data = stage_vals, mapping=aes(x = mid_ma, y = temperature_stage), colour = "black", size = 1.1, alpha  = 1) +
#geom_hline(data = NULL, mapping=aes(yintercept = 17.84), colour = "#0570b0", linetype = "dashed", size = 1, alpha = 1) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-105, 90), breaks = seq(-90, 90, 30), labels = seq(-90, 90, 30)) +
scale_fill_manual(values = col) +
labs(x = "Time (Ma)", y = expression(bold(paste("Palaeolatitude (",degree,")"))), subtitle = "") +
theme(panel.background = element_blank(),
plot.margin = margin(0.25,0.25,0.25,0.25, "cm"),
legend.position = "top",
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 10),
legend.margin=unit(0, "cm"),
legend.key.size = unit(1,"line"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
p1 <- p1 + guides(fill = guide_legend(nrow = 1))
ggsave(file = "./figures/terrestrial_data.png", plot = p1, width = 150, height = 95, units = "mm", dpi = 300, scale = 1.2)
#SST plot
#---------------------------------
library(ggplot2)
library(ggpubr)
library(rworldmap)
library(sp)
#---------------------------------
#plot style
#get stages
stages <- read.csv("https://paleobiodb.org/data1.2/intervals/list.txt?scale_id=1&scale_level=5")
#get periods
periods <- read.csv("https://paleobiodb.org/data1.2/intervals/list.txt?scale_id=1&scale_level=3")
periods$mid_ma <- (periods$max_ma+periods$min_ma)/2
#shading data
s <- seq(2, nrow(periods), 2)
throwing_shade <- periods[s,]
periods$color <- "white"
#define colours for plots
#---------------------------------
#read data
data <- read.csv("./results/SST/extracted_temp.csv")
data <- subset(data, ODP == 0)
coords2continent = function(points)
{
countriesSP <- getMap(resolution='low')
#countriesSP <- getMap(resolution='high') #you could use high res map from rworldxtra if you were concerned about detail
# converting points to a SpatialPoints object
# setting CRS directly to that from rworldmap
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
# use 'over' to get indices of the Polygons object containing each point
indices = over(pointsSP, countriesSP)
#indices$continent   # returns the continent (6 continent model)
indices$REGION   # returns the continent (7 continent model)
#indices$ADMIN  #returns country name
#indices$ISO3 # returns the ISO3 code
}
data$continent <- coords2continent(data[,c("lon", "lat")])
data <- subset(data, continent != "<NA>")
col <- rev(c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33", "#a65628"))
p1 <- ggplot() +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -105, ymax= Inf), linetype = 0, color="grey90", alpha=0.1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -105, ymax = -90), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -97.5, label = abbrev), colour = "black", alpha=1)  +
geom_point(data = data, mapping=aes(x = gts2012, y = palaeolat, fill = continent), shape = 21, colour = "black", size = 1.5, alpha  = 0.75) +
#geom_point(data = stage_vals, mapping=aes(x = mid_ma, y = temperature_stage), colour = "black", size = 1.1, alpha  = 1) +
#geom_line(data = stage_vals, mapping=aes(x = mid_ma, y = temperature_stage), colour = "black", size = 1.1, alpha  = 1) +
#geom_hline(data = NULL, mapping=aes(yintercept = 17.84), colour = "#0570b0", linetype = "dashed", size = 1, alpha = 1) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-105, 90), breaks = seq(-90, 90, 30), labels = seq(-90, 90, 30)) +
scale_fill_manual(values = col) +
labs(x = "Time (Ma)", y = expression(bold(paste("Palaeolatitude (",degree,")"))), subtitle = "") +
theme(panel.background = element_blank(),
plot.margin = margin(0.25,0.25,0.25,0.25, "cm"),
legend.position = "top",
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 10),
legend.margin=unit(0, "cm"),
legend.key.size = unit(1,"line"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
p1
ggsave(file = "./figures/terrestrial_data.png", plot = p1, width = 150, height = 95, units = "mm", dpi = 300, scale = 1.2)
### load libraries
library(nlme)
library(AICcmodavg)
library(geoscale)
#
### Read files
# time scale
myscale <- read.csv("./data/timescale.csv")
# temperature stage-level
itemp <- read.csv("./results/SST/binned_vals.csv")
stages <- timescale[which(timescale$Type == "Age"),]
#
### function for plotting the confidence interval band:
error_polygon <- function(ep,en,tstart,tend,tmid,color) {
polygon( c(tstart, tmid, tend, tend, rev(tmid), tstart),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
# spatial statistics stage-level
ispat <- read.csv("./results/spatial_stats/stage_level_spatial_stats.csv")
#
### prepare stagecolours (geoscale library):
timescale <- timescales[[1]]
pointtype <- c(rep(21,100))
par(mfrow = c(1,2), mar = c(4.5,4.5,1,1), mgp = c(2.25,0.75,0), las = 1)
# cut out 3 Pleistocene stages
stagecol <- rgb(stages[c("Col_R","Col_G", "Col_B")], maxColorValue=255)
stagecol <- stagecol[c(1,5:length(stagecol))]
#
#
#
#
# Indexes of data to use
index <- c(1:48,50:87,91:92)
stagecol <- stagecol
# select data
x <- diff(rev(ispat$mean[index]))
y <- diff(rev(itemp$temperature_stage[index]))
# define new data for confidence interval
regrange <- seq(min(x,na.rm =T),max(x, na.rm =T),0.02)
### Create confidence intervals:
new <- data.frame("x"=regrange)
#
### OLS: (use all data, no exclusion of Cambrian data or NA necessary)
#x <- ispat$mean[]
#y <- itemp$temperature_stage[]
olm <- lm(y~x)
prediction95 <- predict(olm,newdata = new,interval = "confidence", level = 0.95)
#
# A - with all data:
#
plot(x,y, xlab = expression(Delta~"Absolute palaeolatitudinal centroid ("*degree*")"),
ylab = expression(Delta~"Global mean temperature ( "*degree~"C) "), main = "", pch = 21, bg = stagecol, cex = 1.2,
type = "n", cex.lab = 1, cex.axis = 0.85) #xlim = c(min(x)-1,max(x)+1))
#
# plot confidence interval of GLS
error_polygon(prediction95[,2], prediction95[,3],regrange[1],regrange[length(regrange)],
regrange, col = rgb(0,0,0,0.2))
# cut out 3 Pleistocene stages
stagecol <- rgb(stages[c("Col_R","Col_G", "Col_B")], maxColorValue=255)
### load libraries
library(nlme)
library(AICcmodavg)
library(geoscale)
#
### function for plotting the confidence interval band:
error_polygon <- function(ep,en,tstart,tend,tmid,color) {
polygon( c(tstart, tmid, tend, tend, rev(tmid), tstart),
c((ep)[1],ep, (ep)[length(ep)], (en)[length(en)], rev(en), (en)[1]),
border = NA, col = color)
}
#
### Read files
# time scale
myscale <- read.csv("./data/timescale.csv")
# spatial statistics stage-level
ispat <- read.csv("./results/spatial_stats/stage_level_spatial_stats.csv")
# temperature stage-level
itemp <- read.csv("./results/SST/binned_vals.csv")
#
### prepare stagecolours (geoscale library):
timescale <- timescales[[1]]
stages <- timescale[which(timescale$Type == "Age"),]
pointtype <- c(rep(21,100))
par(mfrow = c(1,2), mar = c(4.5,4.5,1,1), mgp = c(2.25,0.75,0), las = 1)
# cut out 3 Pleistocene stages
stagecol <- rgb(stages[c("Col_R","Col_G", "Col_B")], maxColorValue=255)
stagecol <- stagecol[c(1,5:length(stagecol))]
#
#
#
#
# Indexes of data to use
index <- c(1:48,50:87,91:92)
stagecol <- stagecol
# select data
x <- diff(rev(ispat$mean[index]))
y <- diff(rev(itemp$temperature_stage[index]))
# define new data for confidence interval
regrange <- seq(min(x,na.rm =T),max(x, na.rm =T),0.02)
### Create confidence intervals:
new <- data.frame("x"=regrange)
#
### OLS: (use all data, no exclusion of Cambrian data or NA necessary)
#x <- ispat$mean[]
#y <- itemp$temperature_stage[]
olm <- lm(y~x)
prediction95 <- predict(olm,newdata = new,interval = "confidence", level = 0.95)
#
# A - with all data:
#
plot(x,y, xlab = expression(Delta~"Absolute palaeolatitudinal centroid ("*degree*")"),
ylab = expression(Delta~"Global mean temperature ( "*degree~"C) "), main = "", pch = 21, bg = stagecol, cex = 1.2,
type = "n", cex.lab = 1, cex.axis = 0.85) #xlim = c(min(x)-1,max(x)+1))
#
# plot confidence interval of GLS
error_polygon(prediction95[,2], prediction95[,3],regrange[1],regrange[length(regrange)],
regrange, col = rgb(0,0,0,0.2))
# plot OLS
points(regrange,olm$coefficients[1]+olm$coefficients[2]*regrange, type = "l",col = rgb(0,0,0,1), lwd = 2)
#
# plot points
points(x,y, pch = 21, bg = rev(stagecol[index])[-1], cex = 1.2, xpd = T)
#
# Add text with R2 and p
text(-15,13.7,expression(italic("R"^2)~"= 0.00,"~italic("P")*" = 0.64"), cex = 0.75)
#
# add line segments
lines(c(5.9,7.7),c(38.6,38.6),lty=2)
lines(c(5.9,7.7),c(34.7,34.7),lty=1, lwd = 2)
#
# Add "A"
text(-58,15.9,expression(bold("A")),xpd = T)
#
summary(olm)
# cut out 3 Pleistocene stages
stagecol <- rgb(stages[c("Col_R","Col_G", "Col_B")], maxColorValue=255)
stagecol <- stagecol[c(1,5:length(stagecol))]
#
#
#
#
# Indexes of data to use
index <- c(1:47,50:87,91:92)
stagecol <- stagecol
# select data
x2 <- diff(rev(ispat$mean[index]))
y2 <- diff(rev(itemp$temperature_stage[index]))
# define new data for confidence interval
regrange <- seq(min(x2,na.rm =T),max(x2, na.rm =T),0.02)
### Create confidence intervals:
new <- data.frame("x2"=regrange)
#
### OLS: (use all data, no exclusion of Cambrian data or NA necessary)
#x <- ispat$mean[]
#y <- itemp$temperature_stage[]
olm <- lm(y2~x2)
prediction95 <- predict(olm,newdata = new,interval = "confidence", level = 0.95)
#
# B - remove Olenekian
#
plot(x,y, xlab = expression(Delta~"Absolute palaeolatitudinal centroid ("*degree*")"),
ylab = expression(Delta~"Global mean temperature ( "*degree~"C) "), main = "", pch = 21, bg = stagecol, cex = 1.2,
type = "n", cex.lab = 1, cex.axis = 0.85) #xlim = c(min(x)-1,max(x)+1))
#
# plot confidence interval of GLS
error_polygon(prediction95[,2], prediction95[,3],regrange[1],regrange[length(regrange)],
regrange, col = rgb(0,0,0,0.2))
# plot OLS
points(regrange,olm$coefficients[1]+olm$coefficients[2]*regrange, type = "l",col = rgb(0,0,0,1), lwd = 2)
#
# plot points
points(x2,y2, pch = 21, bg = rev(stagecol[index])[-1], cex = 1.2, xpd = T)
points(x[40:41],y[40:41], pch = 4, cex = 1.2, xpd = T)
regrange
#
# A - with all data:
#
plot(x,y, xlab = expression(Delta~"Absolute palaeolatitudinal centroid ("*degree*")"),
ylab = expression(Delta~"Global mean temperature ( "*degree~"C) "), main = "", pch = 21, bg = stagecol, cex = 1.2,
type = "n", cex.lab = 1, cex.axis = 0.85) #xlim = c(min(x)-1,max(x)+1))
#
# plot confidence interval of GLS
error_polygon(prediction95[,2], prediction95[,3],regrange[1],regrange[length(regrange)],
regrange, col = rgb(0,0,0,0.2))
# plot OLS
points(regrange,olm$coefficients[1]+olm$coefficients[2]*regrange, type = "l",col = rgb(0,0,0,1), lwd = 2)
#
# plot points
points(x,y, pch = 21, bg = rev(stagecol[index])[-1], cex = 1.2, xpd = T)
#
# Add text with R2 and p
text(-15,13.7,expression(italic("R"^2)~"= 0.00,"~italic("P")*" = 0.64"), cex = 0.75)
#
# add line segments
lines(c(5.9,7.7),c(38.6,38.6),lty=2)
lines(c(5.9,7.7),c(34.7,34.7),lty=1, lwd = 2)
#
# Add "A"
text(-58,15.9,expression(bold("A")),xpd = T)
#
summary(olm)
# cut out 3 Pleistocene stages
stagecol <- rgb(stages[c("Col_R","Col_G", "Col_B")], maxColorValue=255)
stagecol <- stagecol[c(1,5:length(stagecol))]
#
#
#
#
# Indexes of data to use
index <- c(1:47,50:87,91:92)
stagecol <- stagecol
# select data
x2 <- diff(rev(ispat$mean[index]))
y2 <- diff(rev(itemp$temperature_stage[index]))
# define new data for confidence interval
regrange <- seq(min(x2,na.rm =T),max(x2, na.rm =T),0.02)
### Create confidence intervals:
new <- data.frame("x2"=regrange)
#
### OLS: (use all data, no exclusion of Cambrian data or NA necessary)
#x <- ispat$mean[]
#y <- itemp$temperature_stage[]
olm <- lm(y2~x2)
prediction95 <- predict(olm,newdata = new,interval = "confidence", level = 0.95)
#
# B - remove Olenekian
#
plot(x,y, xlab = expression(Delta~"Absolute palaeolatitudinal centroid ("*degree*")"),
ylab = expression(Delta~"Global mean temperature ( "*degree~"C) "), main = "", pch = 21, bg = stagecol, cex = 1.2,
type = "n", cex.lab = 1, cex.axis = 0.85) #xlim = c(min(x)-1,max(x)+1))
#
# plot confidence interval of GLS
error_polygon(prediction95[,2], prediction95[,3],regrange[1],regrange[length(regrange)],
regrange, col = rgb(0,0,0,0.2))
# plot OLS
points(regrange,olm$coefficients[1]+olm$coefficients[2]*regrange, type = "l",col = rgb(0,0,0,1), lwd = 2)
#
#
#
#
# Indexes of data to use
index <- c(1:48,50:87,91:92)
stagecol <- stagecol
# select data
x2 <- diff(rev(ispat$mean[index]))
y2 <- diff(rev(itemp$temperature_stage[index]))
# define new data for confidence interval
regrange <- seq(min(x2,na.rm =T),max(x2, na.rm =T),0.02)
### Create confidence intervals:
new <- data.frame("x2"=regrange)
#
### OLS: (use all data, no exclusion of Cambrian data or NA necessary)
#x <- ispat$mean[]
#y <- itemp$temperature_stage[]
olm <- lm(y2~x2)
prediction95 <- predict(olm,newdata = new,interval = "confidence", level = 0.95)
#
# B - remove Olenekian
#
plot(x,y, xlab = expression(Delta~"Absolute palaeolatitudinal centroid ("*degree*")"),
ylab = expression(Delta~"Global mean temperature ( "*degree~"C) "), main = "", pch = 21, bg = stagecol, cex = 1.2,
type = "n", cex.lab = 1, cex.axis = 0.85) #xlim = c(min(x)-1,max(x)+1))
#
# plot confidence interval of GLS
error_polygon(prediction95[,2], prediction95[,3],regrange[1],regrange[length(regrange)],
regrange, col = rgb(0,0,0,0.2))
# plot OLS
points(regrange,olm$coefficients[1]+olm$coefficients[2]*regrange, type = "l",col = rgb(0,0,0,1), lwd = 2)
#
# plot points
points(x2,y2, pch = 21, bg = rev(stagecol[index])[-1], cex = 1.2, xpd = T)
points(x[40:41],y[40:41], pch = 4, cex = 1.2, xpd = T)
#
# Add text with R2 and p
text(-15,13.7,expression(italic("R"^2)~"= 0.11,"~italic("P")*" = 0.002"), cex = 0.75)
#
# add line segments
lines(c(5.9,7.7),c(38.6,38.6),lty=2)
lines(c(5.9,7.7),c(34.7,34.7),lty=1, lwd = 2)
#
# Add "A"
text(-58,15.9,expression(bold("B")),xpd = T)
#
summary(olm)
cor.test(x2,y2, method = "spearman")
cor.test(x,y, method = "spearman")
cor.test(x,y, method = "pearson")
#
#
#
#
# Indexes of data to use
index <- c(1:48,50:87,91:92)
stagecol <- stagecol
# select data
x2 <- diff(rev(ispat$mean[index]))
y2 <- diff(rev(itemp$temperature_stage[index]))
# define new data for confidence interval
regrange <- seq(min(x2,na.rm =T),max(x2, na.rm =T),0.02)
### Create confidence intervals:
new <- data.frame("x2"=regrange)
#
### OLS: (use all data, no exclusion of Cambrian data or NA necessary)
#x <- ispat$mean[]
#y <- itemp$temperature_stage[]
olm <- lm(y2~x2)
prediction95 <- predict(olm,newdata = new,interval = "confidence", level = 0.95)
olm
#
# B - remove Olenekian
#
plot(x,y, xlab = expression(Delta~"Absolute palaeolatitudinal centroid ("*degree*")"),
ylab = expression(Delta~"Global mean temperature ( "*degree~"C) "), main = "", pch = 21, bg = stagecol, cex = 1.2,
type = "n", cex.lab = 1, cex.axis = 0.85) #xlim = c(min(x)-1,max(x)+1))
#
# plot confidence interval of GLS
error_polygon(prediction95[,2], prediction95[,3],regrange[1],regrange[length(regrange)],
regrange, col = rgb(0,0,0,0.2))
# plot OLS
points(regrange,olm$coefficients[1]+olm$coefficients[2]*regrange, type = "l",col = rgb(0,0,0,1), lwd = 2)
#
# plot points
points(x2,y2, pch = 21, bg = rev(stagecol[index])[-1], cex = 1.2, xpd = T)
points(x[40:41],y[40:41], pch = 4, cex = 1.2, xpd = T)
#
# Add text with R2 and p
text(-15,13.7,expression(italic("R"^2)~"= 0.11,"~italic("P")*" = 0.002"), cex = 0.75)
#
# add line segments
lines(c(5.9,7.7),c(38.6,38.6),lty=2)
lines(c(5.9,7.7),c(34.7,34.7),lty=1, lwd = 2)
#
# Add "A"
text(-58,15.9,expression(bold("B")),xpd = T)
#
summary(olm)
#
#
#
#
# Indexes of data to use
index <- c(1:47,50:87,91:92)
stagecol <- stagecol
# select data
x2 <- diff(rev(ispat$mean[index]))
y2 <- diff(rev(itemp$temperature_stage[index]))
# define new data for confidence interval
regrange <- seq(min(x2,na.rm =T),max(x2, na.rm =T),0.02)
### Create confidence intervals:
new <- data.frame("x2"=regrange)
#
### OLS: (use all data, no exclusion of Cambrian data or NA necessary)
#x <- ispat$mean[]
#y <- itemp$temperature_stage[]
olm <- lm(y2~x2)
prediction95 <- predict(olm,newdata = new,interval = "confidence", level = 0.95)
#
# B - remove Olenekian
#
plot(x,y, xlab = expression(Delta~"Absolute palaeolatitudinal centroid ("*degree*")"),
ylab = expression(Delta~"Global mean temperature ( "*degree~"C) "), main = "", pch = 21, bg = stagecol, cex = 1.2,
type = "n", cex.lab = 1, cex.axis = 0.85) #xlim = c(min(x)-1,max(x)+1))
#
# plot confidence interval of GLS
error_polygon(prediction95[,2], prediction95[,3],regrange[1],regrange[length(regrange)],
regrange, col = rgb(0,0,0,0.2))
# plot OLS
points(regrange,olm$coefficients[1]+olm$coefficients[2]*regrange, type = "l",col = rgb(0,0,0,1), lwd = 2)
#
# plot points
points(x2,y2, pch = 21, bg = rev(stagecol[index])[-1], cex = 1.2, xpd = T)
points(x[40:41],y[40:41], pch = 4, cex = 1.2, xpd = T)
ispat$mean
View(ispat)
View(ispat)
#
#
#
#
# Indexes of data to use
index <- c(1:47,50:87,91:92)
stagecol <- stagecol
stagecol
# select data
x2 <- diff(rev(ispat$mean[index]))
y2 <- diff(rev(itemp$temperature_stage[index]))
x2
y2
y2[47]
y2[46]
y2[48]
#
#
#
#
# Indexes of data to use
index <- c(1:48,50:87,91:92)
stagecol <- stagecol
# select data
x2 <- diff(rev(ispat$mean[index]))
y2 <- diff(rev(itemp$temperature_stage[index]))
x2
index <- c(1:48,50:87,91:92)
stagecol <- stagecol
# select data
x2 <- diff(rev(ispat$mean[index]))
y2 <- diff(rev(itemp$temperature_stage[index]))
