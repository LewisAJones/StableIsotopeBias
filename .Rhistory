#binned values
stages <- read.csv("./data/stage_bins.csv")
#read data
data <- read.csv("./results/SST/extracted_temp.csv")
#binned values
stages <- read.csv("./data/stage_bins.csv")
#read data
data <- read.csv("./results/SST/extracted_temp.csv")
#calculate stage values
stages$temperature_stage <- NA
stages$ext_temperature_stage_modern <- NA
stages$ext_temperature_stage_eocene <- NA
# Get sea surface temperature data
# Lewis A. Jones
# March 2020
#---------------------------------
# Load package
library(sdmpredictors)
library(raster)
library(matrixStats)
library(ggplot2)
library(ggpubr)
library(ggpmisc)
source("./R/options.R")
#---------------------------------
# Explore datasets in the package
#list_datasets()
# Explore layers in a dataset
#list_layers()
# Download specific layers to the current directory
sst <- load_layers(c("BO_sstmean"))
sst <- sst$BO_sstmean
sst <- resample(sst, y = raster(res = 1))
mean <- rowMeans(as.matrix(sst), na.rm = TRUE)
sd <- rowSds(as.matrix(sst), na.rm = TRUE)
lats <- seq(-90+(180/nrow(sst)/2), 90-(180/nrow(sst)/2), by = 180/nrow(sst))
df <- cbind.data.frame(mean, sd, lats)
df <- na.omit(df)
sst_artificial <- raster(res = res(sst), val = rep(mean, each = ncol(sst)))
plot(sst_artificial)
writeRaster(sst, "./results/SST/SST_raster.tif", overwrite = TRUE) #save data
writeRaster(sst_artificial, "./results/SST/SST_artificial.tif", overwrite = TRUE) #save data
p1 <- ggplot(df, aes(x = abs(lats), y = mean)) +
geom_point(colour="black", size = 1.25, alpha=0.7) +
stat_smooth(method = "gam", fullrange = TRUE, xseq = seq(0,90, by=1)) +
xlim(0, 90) +
ylim(0, 40) +
labs(subtitle = "Modern", x = expression(bold(paste("Latitude (",degree,")"))), y = expression(bold(paste("Sea surface temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.minor.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
p1
data <- read.csv("./data/Zhang_temp_data.csv")
p2 <- ggplot(data, aes(x = abs(Paleolatitude), y = MAT)) +
geom_point(colour="black", size = 1.25, alpha=0.7) +
stat_smooth(method = "gam", fullrange = TRUE, xseq = seq(0,90, by=1)) +
xlim(0, 90) +
ylim(0, 40) +
labs(subtitle = "Late Paleocene-Early Eocene", x = expression(bold(paste("Latitude (",degree,")"))), y = expression(bold(paste("Sea surface temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.minor.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
p2
p <- ggarrange(p1, p2, ncol=1, nrow=2, widths = c(1,1), labels = "AUTO", align = "v")
ggsave(file = "./results/SST/sst_gradient.png", plot = p, width = 150, height = 150, units = "mm", dpi = 300, scale = 1.7)
modern <- ggplot_build(p1)$data[[2]]
eocene <- ggplot_build(p2)$data[[2]]
write.csv(modern, "./results/SST/modern_temp_grad.csv", row.names = FALSE)
write.csv(eocene, "./results/SST/eocene_temp_grad.csv", row.names = FALSE)
data <- read.csv("./data/cleaned_StabIsoDB.csv")
data$modern_ext_t <- NA
for(i in 1:nrow(modern)){
vec <- which(round(abs(data$palaeolat)) == modern$x[i])
data$modern_ext_t[vec] <- modern$x[i]
}
data$eocene_ext_t <- NA
for(i in 1:nrow(eocene)){
vec <- which(round(abs(data$palaeolat)) == eocene$x[i])
data$eocene_ext_t[vec] <- eocene$x[i]
}
write.csv("./results/SST/extracted_temp.csv")
write.csv(data, "./results/SST/extracted_temp.csv", row.names = FALSE)
######################
#load data
data <- read.csv("./data/StabIsoDB.csv")
View(data)
######################
#load data
data <- read.csv("./data/cleaned_StabIsoDB.csv")
q <- subset(data, period == "Quaternary")
View(q)
######################
#load data
data <- read.csv("./data/StabIsoDB.csv")
data <- read.csv("./data/StabIsoDB.csv")
#remove data without coordinates
data <- subset(data, !is.na(lat) & !is.na(long))
#update mineralogy
data <- data %>% mutate(mineralogy = ifelse(fossil.group == "Brachiopod calcite", "calcite",mineralogy))
#retain only aragonite, calcite and apatite data
data <- data %>% filter(mineralogy %in% c("aragonite","calcite", "Calcite", "apatite", "Aragonite"))
#update so database is uniform
data[which(data$mineralogy == "Calcite"),]$mineralogy <- c("calcite")
data[which(data$mineralogy == "Aragonite"),]$mineralogy <- c("aragonite")
#correct coordinate errors
which(data$country == "USA")
which(data$country == "USA" & data$long > 0)
vec <- which(data$country == "USA" & data$long > 0)
data[vec,]
test <- data[vec,]
View(data)
View(test)
vec <- which(data$country == "USA" & data$long > 0)
data[vec,c("long")]
data[vec,c("long")]*-1
data[vec,c("long")]*-1
View(data)
######################
#load data
data <- read.csv("./data/StabIsoDB.csv")
View(data)
data <- data[,c("country", "lat", "long")]
data <- unique(data)
all <- read.csv("./data/StabIsoDB.csv")
subset(all, lat = 16.6300)
subset(all, lat == 16.6300)
subset(all, lat == 16.6300)
vec <- which(data$country == "Atlantic" & data$long > 0)
sub <- data
data <- read.csv("./data/StabIsoDB.csv")
#remove data without coordinates
data <- subset(data, !is.na(lat) & !is.na(long))
#update mineralogy
data <- data %>% mutate(mineralogy = ifelse(fossil.group == "Brachiopod calcite", "calcite",mineralogy))
#retain only aragonite, calcite and apatite data
data <- data %>% filter(mineralogy %in% c("aragonite","calcite", "Calcite", "apatite", "Aragonite"))
#update so database is uniform
data[which(data$mineralogy == "Calcite"),]$mineralogy <- c("calcite")
data[which(data$mineralogy == "Aragonite"),]$mineralogy <- c("aragonite")
#correct coordinate errors
vec <- which(data$country == "USA" & data$long > 0)
data[vec,c("long")] <- data[vec,c("long")]*-1
vec <- which(data$country == "Atlantic" & data$long > 0)
######################
#load data
data <- read.csv("./data/StabIsoDB.csv")
#remove data without coordinates
data <- subset(data, !is.na(lat) & !is.na(long))
#update mineralogy
data <- data %>% mutate(mineralogy = ifelse(fossil.group == "Brachiopod calcite", "calcite",mineralogy))
#retain only aragonite, calcite and apatite data
data <- data %>% filter(mineralogy %in% c("aragonite","calcite", "Calcite", "apatite", "Aragonite"))
######################
#load data
data <- read.csv("./data/StabIsoDB.csv")
#remove data without coordinates
data <- subset(data, !is.na(lat) & !is.na(long))
#update mineralogy
data <- data %>% mutate(mineralogy = ifelse(fossil.group == "Brachiopod calcite", "calcite",mineralogy))
#retain only aragonite, calcite and apatite data
data <- data %>% filter(mineralogy %in% c("aragonite","calcite", "Calcite", "apatite", "Aragonite"))
data
######################
#load data
data <- read.csv("./data/StabIsoDB.csv")
#remove data without coordinates
data <- subset(data, !is.na(lat) & !is.na(long))
#update mineralogy
data <- data %>% mutate(mineralogy = ifelse(fossil.group == "Brachiopod calcite", "calcite",mineralogy))
#retain only aragonite, calcite and apatite data
data <- data %>% filter(mineralogy %in% c("aragonite","calcite", "Calcite", "apatite", "Aragonite"))
#data prep and clean
######################
#load libraries and functions
library(dplyr)
library(pbapply)
library(chronosphere)
source("./R/functions/palaeorotate.R")
source("./R/functions/calculate_T.R")
######################
#load data
data <- read.csv("./data/StabIsoDB.csv")
#remove data without coordinates
data <- subset(data, !is.na(lat) & !is.na(long))
#update mineralogy
data <- data %>% mutate(mineralogy = ifelse(fossil.group == "Brachiopod calcite", "calcite",mineralogy))
#retain only aragonite, calcite and apatite data
data <- data %>% filter(mineralogy %in% c("aragonite","calcite", "Calcite", "apatite", "Aragonite"))
#update so database is uniform
data[which(data$mineralogy == "Calcite"),]$mineralogy <- c("calcite")
data[which(data$mineralogy == "Aragonite"),]$mineralogy <- c("aragonite")
#data prep and clean
######################
#load libraries and functions
library(dplyr)
library(pbapply)
library(chronosphere)
source("./R/functions/palaeorotate.R")
source("./R/functions/calculate_T.R")
######################
#load data
data <- read.csv("./data/StabIsoDB.csv")
#remove data without coordinates
data <- subset(data, !is.na(lat) & !is.na(long))
#update mineralogy
data <- data %>% mutate(mineralogy = ifelse(fossil.group == "Brachiopod calcite", "calcite",mineralogy))
#retain only aragonite, calcite and apatite data
data <- data %>% filter(mineralogy %in% c("aragonite","calcite", "Calcite", "apatite", "Aragonite"))
#update so database is uniform
data[which(data$mineralogy == "Calcite"),]$mineralogy <- c("calcite")
data[which(data$mineralogy == "Aragonite"),]$mineralogy
#correct coordinate errors
vec <- which(data$country == "USA" & data$long > 0)
data[vec,c("long")]*-1
data[vec,c("long")] <- data[vec,c("long")]*-1
which(data$country == "Atlantic" & data$long > 0)
which(data$country == "Atlantic" & data$long == 59.8)
vec <- which(data$country == "Atlantic" & data$long == 59.8)
vec <- which(data$country == "Atlantic" & data$long == 59.8)
data[vec,c("long")] <- data[vec,c("long")]*-1
data[vec,c("long")]
unique(data$authors)
which(data$country == "Pacific" & data$lat == 31)
which(data$country == "Pacific" & data$lat == 31.6)
which(data$country == "Pacific" & data$long == 163.358500)
View(data)
View(sub)
View(sub)
data <- read.csv("./data/StabIsoDB.csv")
#remove data without coordinates
data <- subset(data, !is.na(lat) & !is.na(long))
#update mineralogy
data <- data %>% mutate(mineralogy = ifelse(fossil.group == "Brachiopod calcite", "calcite",mineralogy))
#retain only aragonite, calcite and apatite data
data <- data %>% filter(mineralogy %in% c("aragonite","calcite", "Calcite", "apatite", "Aragonite"))
#update so database is uniform
data[which(data$mineralogy == "Calcite"),]$mineralogy <- c("calcite")
data[which(data$mineralogy == "Aragonite"),]$mineralogy <- c("aragonite")
#correct coordinate errors
sub <- data[,c("country", "long", "lat", "authors")]
sub <- unique(sub)
View(sub)
write.csv(sub, "./data/quality_check.csv")
View(data)
View(data)
#map plots
#
library(rgdal)
library(ggpubr)
#
### Read in transformed map files
periodmaplisttrans <- readRDS("./R/figures/period_maps_transformed.rds")
# Define periods
periodnames <- c("Cambrian", "Ordovician", "Silurian", "Devonian", "Carboniferous", "Permian", "Triassic", "Jurassic", "Cretaceous", "Paleogene", "Neogene", "Quaternary")
periodnames_idb <- list("Cambrian", "Ordovician", "Silurian", "Devonian", c("Mississippian", "Pennsylvanian"), "Permian", "Triassic", "Jurassic", "Cretaceous", "Paleogene", "Neogene", "Quaternary")
#
###Read the isotope data set
idb <- read.csv("./data/cleaned_StabIsoDB.csv")
periodmap <- function(data, width1 = 20, height1 = 15) {
periodcoordinates <- list(NULL)
# transform coordinates from data (chose the correct columns)
for(i in 1:12) {
subs <- subset(data, period %in% periodnames_idb[[i]])
subs_coord <- unique(cbind(subs$palaeolng,subs$palaeolat))
periodcoordinates[[i]] <-  project(subs_coord,proj = "+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84")
}
# plot the results on paleomaps
#windows(width1,height1)
par(mfrow = c(4,3), mar = c(1,1,1,1))
for(i in 1:12) {
p1 <- plot(periodmaplisttrans[[13]] , lwd=2, col=rgb(0.6,0.85,0.9,1), add = F, bg = "white",border = F, ylim = c(-9000000,9000000),
xpd = T, main = periodnames[i])
plot(periodmaplisttrans[[i]][[1]], col=rgb(0.85,0.99,0.99,1), add = T, bg = NA, border = F)
plot(periodmaplisttrans[[i]][[2]], lwd=2, col= rgb(0.9,0.8,0.7,1), add = T, bg = NA,border = F)
plot(periodmaplisttrans[[i]][[3]], lwd=2, col= rgb(0.825,0.725,0.625,1), add = T, bg = NA,border = F)
points(periodcoordinates[[i]], pch = 1, col = rgb(0,0,0,0.4), lwd = 3, cex = 0.25)
}
}
periodmap(idb)
#map plots
#
library(rgdal)
library(ggpubr)
#
### Read in transformed map files
periodmaplisttrans <- readRDS("./R/figures/period_maps_transformed.rds")
# Define periods
periodnames <- c("Cambrian", "Ordovician", "Silurian", "Devonian", "Carboniferous", "Permian", "Triassic", "Jurassic", "Cretaceous", "Paleogene", "Neogene", "Quaternary")
periodnames_idb <- list("Cambrian", "Ordovician", "Silurian", "Devonian", c("Mississippian", "Pennsylvanian"), "Permian", "Triassic", "Jurassic", "Cretaceous", "Paleogene", "Neogene", "Quaternary")
#
###Read the isotope data set
idb <- read.csv("./data/cleaned_StabIsoDB.csv")
### Function to plot
periodmap <- function(data, width1 = 20, height1 = 15) {
periodcoordinates <- list(NULL)
# transform coordinates from data (chose the correct columns)
for(i in 1:12) {
subs <- subset(data, period %in% periodnames_idb[[i]])
subs_coord <- unique(cbind(subs$palaeolng,subs$palaeolat))
periodcoordinates[[i]] <-  project(subs_coord,proj = "+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84")
}
# plot the results on paleomaps
#windows(width1,height1)
par(mfrow = c(4,3), mar = c(1,1,1,1))
for(i in 1:12) {
p1 <- plot(periodmaplisttrans[[13]] , lwd=2, col=rgb(0.6,0.85,0.9,1), add = F, bg = "white",border = F, ylim = c(-9000000,9000000),
xpd = T, main = periodnames[i])
plot(periodmaplisttrans[[i]][[1]], col=rgb(0.85,0.99,0.99,1), add = T, bg = NA, border = F)
plot(periodmaplisttrans[[i]][[2]], lwd=2, col= rgb(0.9,0.8,0.7,1), add = T, bg = NA,border = F)
plot(periodmaplisttrans[[i]][[3]], lwd=2, col= rgb(0.825,0.725,0.625,1), add = T, bg = NA,border = F)
points(periodcoordinates[[i]], pch = 1, col = rgb(0,0,0,0.4), lwd = 3, cex = 0.25)
}
}
png("./figures/maps.png", width = 200, height = 150, res = 300, units = "mm")
periodmap(idb)
dev.off()
# Get sea surface temperature data
# Lewis A. Jones
# March 2020
#---------------------------------
# Load package
library(sdmpredictors)
library(raster)
library(matrixStats)
library(ggplot2)
library(ggpubr)
library(ggpmisc)
source("./R/options.R")
# Download specific layers to the current directory
sst <- load_layers(c("BO_sstmean"))
sst <- sst$BO_sstmean
mean <- rowMeans(as.matrix(sst), na.rm = TRUE)
sd <- rowSds(as.matrix(sst), na.rm = TRUE)
lats <- seq(-90+(180/nrow(sst)/2), 90-(180/nrow(sst)/2), by = 180/nrow(sst))
df <- cbind.data.frame(mean, sd, lats)
df <- na.omit(df)
sst_artificial <- raster(res = res(sst), val = rep(mean, each = ncol(sst)))
plot(sst_artificial)
writeRaster(sst, "./results/SST/SST_raster.tif", overwrite = TRUE) #save data
writeRaster(sst_artificial, "./results/SST/SST_artificial.tif", overwrite = TRUE) #save data
p1
p1 <- ggplot(df, aes(x = abs(lats), y = mean)) +
geom_point(colour="black", size = 1.25, alpha=0.7) +
stat_smooth(method = "gam", fullrange = TRUE, xseq = seq(0,90, by=1)) +
xlim(0, 90) +
ylim(0, 40) +
labs(subtitle = "Modern", x = expression(bold(paste("Latitude (",degree,")"))), y = expression(bold(paste("Sea surface temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.minor.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
modern <- ggplot_build(p1)$data[[2]]
modern
p1
# Get sea surface temperature data
# Lewis A. Jones
# March 2020
#---------------------------------
# Load package
library(sdmpredictors)
library(raster)
library(matrixStats)
library(ggplot2)
library(ggpubr)
library(ggpmisc)
source("./R/options.R")
#---------------------------------
# Explore datasets in the package
#list_datasets()
# Explore layers in a dataset
#list_layers()
# Download specific layers to the current directory
sst <- load_layers(c("BO_sstmean"))
sst <- sst$BO_sstmean
#sst <- resample(sst, y = raster(res = 1))
mean <- rowMeans(as.matrix(sst), na.rm = TRUE)
sd <- rowSds(as.matrix(sst), na.rm = TRUE)
lats <- seq(-90+(180/nrow(sst)/2), 90-(180/nrow(sst)/2), by = 180/nrow(sst))
df <- cbind.data.frame(mean, sd, lats)
df <- na.omit(df)
sst_artificial <- raster(res = res(sst), val = rep(mean, each = ncol(sst)))
plot(sst_artificial)
writeRaster(sst, "./results/SST/SST_raster.tif", overwrite = TRUE) #save data
writeRaster(sst_artificial, "./results/SST/SST_artificial.tif", overwrite = TRUE) #save data
p1 <- ggplot(df, aes(x = abs(lats), y = mean)) +
geom_point(colour="black", size = 1.25, alpha=0.7) +
stat_smooth(method = "gam", fullrange = TRUE, xseq = seq(0,90, by=1)) +
xlim(0, 90) +
ylim(0, 40) +
labs(subtitle = "Modern", x = expression(bold(paste("Latitude (",degree,")"))), y = expression(bold(paste("Sea surface temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.minor.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
p1
data <- read.csv("./data/Zhang_temp_data.csv")
p2 <- ggplot(data, aes(x = abs(Paleolatitude), y = MAT)) +
geom_point(colour="black", size = 1.25, alpha=0.7) +
stat_smooth(method = "gam", fullrange = TRUE, xseq = seq(0,90, by=1)) +
xlim(0, 90) +
ylim(0, 40) +
labs(subtitle = "Late Paleocene-Early Eocene", x = expression(bold(paste("Latitude (",degree,")"))), y = expression(bold(paste("Sea surface temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.minor.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
p2
p <- ggarrange(p1, p2, ncol=1, nrow=2, widths = c(1,1), labels = "AUTO", align = "v")
ggsave(file = "./results/SST/sst_gradient.png", plot = p, width = 150, height = 150, units = "mm", dpi = 300, scale = 1.7)
modern <- ggplot_build(p1)$data[[2]]
eocene <- ggplot_build(p2)$data[[2]]
write.csv(modern, "./results/SST/modern_temp_grad.csv", row.names = FALSE)
write.csv(eocene, "./results/SST/eocene_temp_grad.csv", row.names = FALSE)
data <- read.csv("./data/cleaned_StabIsoDB.csv")
data$modern_ext_t <- NA
for(i in 1:nrow(modern)){
vec <- which(round(abs(data$palaeolat)) == modern$x[i])
data$modern_ext_t[vec] <- modern$x[i]
}
data$eocene_ext_t <- NA
for(i in 1:nrow(eocene)){
vec <- which(round(abs(data$palaeolat)) == eocene$x[i])
data$eocene_ext_t[vec] <- eocene$x[i]
}
write.csv(data, "./results/SST/extracted_temp.csv", row.names = FALSE)
