#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
p1
max(data$modern_ext_t)
# Get sea surface temperature data
# Lewis A. Jones
# March 2020
#---------------------------------
# Load package
library(sdmpredictors)
library(raster)
library(matrixStats)
library(ggplot2)
library(ggpubr)
library(ggpmisc)
source("./R/options.R")
#---------------------------------
# Explore datasets in the package
#list_datasets()
# Explore layers in a dataset
#list_layers()
# Download specific layers to the current directory
sst <- load_layers(c("BO_sstmean"))
sst <- sst$BO_sstmean
#sst <- resample(sst, y = raster(res = 1))
mean <- rowMeans(as.matrix(sst), na.rm = TRUE)
sd <- rowSds(as.matrix(sst), na.rm = TRUE)
lats <- seq(-90+(180/nrow(sst)/2), 90-(180/nrow(sst)/2), by = 180/nrow(sst))
df <- cbind.data.frame(mean, sd, lats)
df <- na.omit(df)
sst_artificial <- raster(res = res(sst), val = rep(mean, each = ncol(sst)))
plot(sst_artificial)
writeRaster(sst, "./results/SST/SST_raster.tif", overwrite = TRUE) #save data
writeRaster(sst_artificial, "./results/SST/SST_artificial.tif", overwrite = TRUE) #save data
p1 <- ggplot(df, aes(x = abs(lats), y = mean)) +
geom_point(colour="black", size = 1.25, alpha=0.7) +
stat_smooth(method = "gam", fullrange = TRUE, xseq = seq(0,90, by=1)) +
xlim(0, 90) +
ylim(0, 40) +
labs(subtitle = "Modern", x = expression(bold(paste("Latitude (",degree,")"))), y = expression(bold(paste("Sea surface temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.minor.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
p1
data <- read.csv("./data/Zhang_temp_data.csv")
p2 <- ggplot(data, aes(x = abs(Paleolatitude), y = MAT)) +
geom_point(colour="black", size = 1.25, alpha=0.7) +
stat_smooth(method = "gam", fullrange = TRUE, xseq = seq(0,90, by=1)) +
xlim(0, 90) +
ylim(0, 40) +
labs(subtitle = "Late Paleocene-Early Eocene", x = expression(bold(paste("Latitude (",degree,")"))), y = expression(bold(paste("Sea surface temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.minor.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
p2
p <- ggarrange(p1, p2, ncol=1, nrow=2, widths = c(1,1), labels = "AUTO", align = "v")
ggsave(file = "./results/SST/sst_gradient.png", plot = p, width = 150, height = 150, units = "mm", dpi = 300, scale = 1.7)
modern <- ggplot_build(p1)$data[[2]]
eocene <- ggplot_build(p2)$data[[2]]
write.csv(modern, "./results/SST/modern_temp_grad.csv", row.names = FALSE)
write.csv(eocene, "./results/SST/eocene_temp_grad.csv", row.names = FALSE)
data <- read.csv("./data/song_isotope.csv")
data$modern_ext_t <- NA
for(i in 1:nrow(modern)){
vec <- which(round(abs(data$Paleolatitude)) == modern$x[i])
data$modern_ext_t[vec] <- modern$x[i]
}
data$eocene_ext_t <- NA
for(i in 1:nrow(eocene)){
vec <- which(round(abs(data$Paleolatitude)) == eocene$x[i])
data$eocene_ext_t[vec] <- eocene$x[i]
}
write.csv(data, "./results/SST/extracted_temp.csv", row.names = FALSE)
max(data$eocene_ext_t)
max(data$modern_ext_t)
modern
# Get sea surface temperature data
# Lewis A. Jones
# March 2020
#---------------------------------
# Load package
library(sdmpredictors)
library(raster)
library(matrixStats)
library(ggplot2)
library(ggpubr)
library(ggpmisc)
source("./R/options.R")
#---------------------------------
# Explore datasets in the package
#list_datasets()
# Explore layers in a dataset
#list_layers()
# Download specific layers to the current directory
sst <- load_layers(c("BO_sstmean"))
sst <- sst$BO_sstmean
#sst <- resample(sst, y = raster(res = 1))
mean <- rowMeans(as.matrix(sst), na.rm = TRUE)
sd <- rowSds(as.matrix(sst), na.rm = TRUE)
lats <- seq(-90+(180/nrow(sst)/2), 90-(180/nrow(sst)/2), by = 180/nrow(sst))
df <- cbind.data.frame(mean, sd, lats)
df <- na.omit(df)
sst_artificial <- raster(res = res(sst), val = rep(mean, each = ncol(sst)))
plot(sst_artificial)
writeRaster(sst, "./results/SST/SST_raster.tif", overwrite = TRUE) #save data
writeRaster(sst_artificial, "./results/SST/SST_artificial.tif", overwrite = TRUE) #save data
p1 <- ggplot(df, aes(x = abs(lats), y = mean)) +
geom_point(colour="black", size = 1.25, alpha=0.7) +
stat_smooth(method = "gam", fullrange = TRUE, xseq = seq(0,90, by=1)) +
xlim(0, 90) +
ylim(0, 40) +
labs(subtitle = "Modern", x = expression(bold(paste("Latitude (",degree,")"))), y = expression(bold(paste("Sea surface temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.minor.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
p1
data <- read.csv("./data/Zhang_temp_data.csv")
p2 <- ggplot(data, aes(x = abs(Paleolatitude), y = MAT)) +
geom_point(colour="black", size = 1.25, alpha=0.7) +
stat_smooth(method = "gam", fullrange = TRUE, xseq = seq(0,90, by=1)) +
xlim(0, 90) +
ylim(0, 40) +
labs(subtitle = "Late Paleocene-Early Eocene", x = expression(bold(paste("Latitude (",degree,")"))), y = expression(bold(paste("Sea surface temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.minor.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
p2
p <- ggarrange(p1, p2, ncol=1, nrow=2, widths = c(1,1), labels = "AUTO", align = "v")
ggsave(file = "./results/SST/sst_gradient.png", plot = p, width = 150, height = 150, units = "mm", dpi = 300, scale = 1.7)
modern <- ggplot_build(p1)$data[[2]]
eocene <- ggplot_build(p2)$data[[2]]
write.csv(modern, "./results/SST/modern_temp_grad.csv", row.names = FALSE)
write.csv(eocene, "./results/SST/eocene_temp_grad.csv", row.names = FALSE)
data <- read.csv("./data/song_isotope.csv")
data$modern_ext_t <- NA
for(i in 1:nrow(modern)){
vec <- which(round(abs(data$Paleolatitude)) == modern$x[i])
data$modern_ext_t[vec] <- modern$y[i]
}
data$eocene_ext_t <- NA
for(i in 1:nrow(eocene)){
vec <- which(round(abs(data$Paleolatitude)) == eocene$x[i])
data$eocene_ext_t[vec] <- eocene$y[i]
}
write.csv(data, "./results/SST/extracted_temp.csv", row.names = FALSE)
#binned values
stages <- read.csv("./data/stage_bins.csv")
#read data
data <- read.csv("./results/SST/extracted_temp.csv")
#calculate stage values
stages$temperature_stage <- NA
stages$ext_temperature_stage_modern <- NA
stages$ext_temperature_stage_eocene <- NA
#calcualte mean temperature
for(i in 1:nrow(stages)){
out <- subset(data, Age..Ma. <= stages$max_ma[i] & Age..Ma. >= stages$min_ma[i])
stages$temperature_stage[i] <- mean(out$T.2010..., na.rm = TRUE)
stages$ext_temperature_stage_modern[i] <- mean(out$modern_ext_t, na.rm = TRUE)
stages$ext_temperature_stage_eocene[i] <- mean(out$eocene_ext_t, na.rm = TRUE)
}
write.csv(stages, "./results/SST/binned_vals.csv", row.names = FALSE)
#SST plot
#---------------------------------
library(ggplot2)
library(ggpubr)
#---------------------------------
#plot style
#get stages
stages <- read.csv("https://paleobiodb.org/data1.2/intervals/list.txt?scale_id=1&scale_level=5")
#get periods
periods <- read.csv("https://paleobiodb.org/data1.2/intervals/list.txt?scale_id=1&scale_level=3")
periods$mid_ma <- (periods$max_ma+periods$min_ma)/2
#shading data
s <- seq(2, nrow(periods), 2)
throwing_shade <- periods[s,]
#define colours for plots
col <- c("black")
#---------------------------------
#read data
data <- read.csv("./results/SST/extracted_temp.csv")
stage_vals <- read.csv("./results/SST/binned_vals.csv")
stage_vals$mid_ma <- (stage_vals$max_ma + stage_vals$min_ma)/2
p1 <- ggplot() +
#geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -6, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -6, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = 0, xend = 541, y = data$modern_ext_t[1], yend = data$modern_temp_mean[1]), linetype = 1, size = 1, color = "royalblue1") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -6, ymax= Inf), linetype = 0, color="grey90", alpha=0.1)  +
#geom_rect(data = periods, mapping=aes(xmin=300, xmax=0, ymin= -6, ymax= 0), linetype = 1, colour = "black", fill="black", alpha=1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -6, ymax = -2), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -4, label = abbrev), colour = "black", alpha=1)  +
geom_point(data = data, mapping=aes(x = Age..Ma., y = modern_ext_t), colour = "darkgrey", size = 1.1, alpha  = 1) +
geom_point(data = stage_vals, mapping=aes(x = mid_ma, y = ext_temperature_stage_modern), colour = "black", size = 1.1, alpha  = 1) +
geom_line(data = stage_vals, mapping=aes(x = mid_ma, y = ext_temperature_stage_modern), colour = "black", size = 1.1, alpha  = 1) +
#geom_smooth(data = data, mapping=aes(x = age, y = modern_temp_ext), colour = "red", size = 1.1, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-6, 65)) +
labs(x = "", y = expression(bold(paste("Temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
p1
p2 <- ggplot() +
#geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -6, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -6, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = 0, xend = 541, y = data$modern_temp_mean[1], yend = data$modern_temp_mean[1]), linetype = 1, size = 1, color = "royalblue1") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -6, ymax= Inf), linetype = 0, color="grey90", alpha=0.1)  +
#geom_rect(data = periods, mapping=aes(xmin=300, xmax=0, ymin= -6, ymax= 0), linetype = 1, colour = "black", fill="black", alpha=1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -6, ymax = -2), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -4, label = abbrev), colour = "black", alpha=1)  +
geom_point(data = data, mapping=aes(x = Age..Ma., y = T.2010...), colour = "darkgrey", size = 1.1, alpha  = 1) +
geom_point(data = stage_vals, mapping=aes(x = mid_ma, y = temperature_stage), colour = "black", size = 1.1, alpha  = 1) +
geom_line(data = stage_vals, mapping=aes(x = mid_ma, y = temperature_stage), colour = "black", size = 1.1, alpha  = 1) +
#geom_smooth(data = data, mapping=aes(x = age, y = temperature), method = "loess", colour = "red", size = 1.1, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-6, 65)) +
labs(x = "", y = expression(bold(paste("Temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
p2
plots <- ggarrange(p2, p1, ncol=1, nrow=2, widths = c(1,1), labels = "AUTO", align = "v")
plots
ggsave(file = "./figures/extracted_temperature.png", plot = plots, width = 150, height = 150, units = "mm", dpi = 600, scale = 1.7)
df1 <- ggplot_build(p2)$data[[8]]
df2 <- ggplot_build(p1)$data[[8]]
df <- df1
df$y <- df1$y - df2$y
p <- ggplot() +
geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -8, yend = Inf), linetype = 2, size = 1, color = "grey90") +
geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -8, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = 0, xend = 541, y = data$modern_temp_mean[1], yend = data$modern_temp_mean[1]), linetype = 1, size = 1, color = "royalblue1") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -8, ymax= Inf), linetype = 0, color="grey90", alpha=0.1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -8, ymax = -6), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -7, label = abbrev), colour = "black", alpha=1)  +
#geom_ribbon(data = df, mapping=aes(x = abs(x), ymin = ymin, ymax = ymax), fill = "red", colour = NA, size =1.1, alpha = 0.75) +
geom_line(data = df, mapping=aes(x = abs(x), y = y), colour = "red", size = 1.1, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-8, 20), breaks = seq(-5, 20, 5), labels = seq(-5, 20, 5)) +
labs(x = "", y = expression(bold(paste(Delta, "Temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
ggsave(file = "./figures/corrected_temperature.png", plot = p, width = 150, height = 75, units = "mm", dpi = 600, scale = 1.7)
data <- read.csv("./data/Cleaned_Veizer_wstages2020.csv")
data <- read.csv("./data/Cleaned_Veizer_wstages2020.csv")
Kilian <- df[sample(nrow(df), 50), ]
Kilian <- data[sample(nrow(data), 50), ]
lewis <- data[sample(nrow(data), 50), ]
write.csv(kilian, "./data/random_sample_kilian.csv")
write.csv(lewis, "./data/random_sample_lewis.csv")
write.csv(Kilian, "./data/random_sample_kilian.csv")
write.csv(lewis, "./data/random_sample_lewis.csv")
data <- read.csv("./data/Cleaned_Veizer_wstages2020.csv")
Kilian <- data[sample(nrow(data), 50), ]
lewis <- data[sample(nrow(data), 50), ]
write.csv(Kilian, "./data/random_sample_kilian.csv", row.names = FALSE)
write.csv(lewis, "./data/random_sample_lewis.csv", row.names = FALSE)
data <- read.csv("C:\\Users/Lewis Jones/OneDrive/StableIsotopeBias/data/raw_data/Cleaned_Veizer_08_02_2021.csv")
data <- read.csv("C:\\Users/Lewis Jones/OneDrive/StableIsotopeBias/data/raw_data/Cleaned_Veizer_08_02_2021.csv")
kilian <- df[sample(nrow(df), 50), ]
lewis <- df[sample(nrow(df), 50), ]
data <- read.csv("C:\\Users/Lewis Jones/OneDrive/StableIsotopeBias/data/raw_data/Cleaned_Veizer_08_02_2021.csv")
kilian <- data[sample(nrow(data), 50), ]
lewis <- data[sample(nrow(data), 50), ]
write.csv(kilian, "C:\\Users/Lewis Jones/OneDrive/StableIsotopeBias/data/raw_data/kilian_random_sample.csv")
write.csv(lewis, "C:\\Users/Lewis Jones/OneDrive/StableIsotopeBias/data/raw_data/lewis_random_sample.csv")
data <- read.csv("C:\\Users/Lewis Jones/OneDrive/StableIsotopeBias/data/raw_data/Cleaned_Veizer_08_02_2021.csv")
kilian <- data[sample(nrow(data), 50), ]
lewis <- data[sample(nrow(data), 50), ]
write.csv(kilian, "C:\\Users/Lewis Jones/OneDrive/StableIsotopeBias/data/raw_data/kilian_random_sample.csv", row.names = FALSE)
write.csv(lewis, "C:\\Users/Lewis Jones/OneDrive/StableIsotopeBias/data/raw_data/lewis_random_sample.csv", row.names = FALSE)
data <- read.csv("C:\\Users/Lewis Jones/OneDrive/StableIsotopeBias/data/raw_data/Cleaned_Veizer_08_02_2021.csv")
kilian <- data[sample(nrow(data), 50), ]
lewis <- data[sample(nrow(data), 50), ]
write.csv(kilian, "C:\\Users/Lewis Jones/OneDrive/StableIsotopeBias/data/raw_data/kilian_random_sample.csv", row.names = FALSE)
write.csv(lewis, "C:\\Users/Lewis Jones/OneDrive/StableIsotopeBias/data/raw_data/lewis_random_sample.csv", row.names = FALSE)
# Get sea surface temperature data
# Lewis A. Jones
# March 2020
#---------------------------------
# Load package
library(sdmpredictors)
library(raster)
library(matrixStats)
library(ggplot2)
library(ggpubr)
library(ggpmisc)
source("./R/options.R")
#---------------------------------
# Explore datasets in the package
#list_datasets()
# Explore layers in a dataset
#list_layers()
# Download specific layers to the current directory
sst <- load_layers(c("BO_sstmean"))
sst <- sst$BO_sstmean
#sst <- resample(sst, y = raster(res = 1))
mean <- rowMeans(as.matrix(sst), na.rm = TRUE)
sd <- rowSds(as.matrix(sst), na.rm = TRUE)
lats <- seq(-90+(180/nrow(sst)/2), 90-(180/nrow(sst)/2), by = 180/nrow(sst))
df <- cbind.data.frame(mean, sd, lats)
df <- na.omit(df)
sst_artificial <- raster(res = res(sst), val = rep(mean, each = ncol(sst)))
plot(sst_artificial)
writeRaster(sst, "./results/SST/SST_raster.tif", overwrite = TRUE) #save data
writeRaster(sst_artificial, "./results/SST/SST_artificial.tif", overwrite = TRUE) #save data
p1 <- ggplot(df, aes(x = abs(lats), y = mean)) +
geom_point(colour="black", size = 1.25, alpha=0.7) +
stat_smooth(method = "gam", fullrange = TRUE, xseq = seq(0,90, by=1)) +
xlim(0, 90) +
ylim(0, 40) +
labs(subtitle = "Modern", x = expression(bold(paste("Latitude (",degree,")"))), y = expression(bold(paste("Sea surface temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.minor.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
p1
data <- read.csv("./data/Zhang_temp_data.csv")
p2 <- ggplot(data, aes(x = abs(Paleolatitude), y = MAT)) +
geom_point(colour="black", size = 1.25, alpha=0.7) +
stat_smooth(method = "gam", fullrange = TRUE, xseq = seq(0,90, by=1)) +
xlim(0, 90) +
ylim(0, 40) +
labs(subtitle = "Late Paleocene-Early Eocene", x = expression(bold(paste("Latitude (",degree,")"))), y = expression(bold(paste("Sea surface temperature (",degree, C,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.minor.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 14, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 14, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.4)
p2
p <- ggarrange(p1, p2, ncol=1, nrow=2, widths = c(1,1), labels = "AUTO", align = "v")
ggsave(file = "./results/SST/sst_gradient.png", plot = p, width = 150, height = 150, units = "mm", dpi = 300, scale = 1.7)
modern <- ggplot_build(p1)$data[[2]]
eocene <- ggplot_build(p2)$data[[2]]
write.csv(modern, "./results/SST/modern_temp_grad.csv", row.names = FALSE)
write.csv(eocene, "./results/SST/eocene_temp_grad.csv", row.names = FALSE)
data <- read.csv("./data/song_isotope.csv")
