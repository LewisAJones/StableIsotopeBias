<<<<<<< Updated upstream
df$lon <- rpoints[,"X"]
df$lat <- rpoints[,"Y"]
}
country
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE))
df$lon <- rpoints[,"X"]
df$lat <- rpoints[,"Y"]
}
rpoints
rpoints <- st_coordinates(st_sample(country, size = 1, type = "regular", by_polygon = TRUE))
rpoints
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "regular", by_polygon = TRUE))
df$lon <- rpoints[,"X"]
df$lat <- rpoints[,"Y"]
}
rpoints
st_sample(country, size = 1, type = "regular", by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE)
?while
?while()
nrow(rpoints)
country <- world[world$name_long == df$Location[i], 0]
while(nrow(rpoints == 0)){rpoints <- st_coordinates(st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE))}
nrow(rpoints == 0)
country <- world[world$name_long == df$Location[i], 0]
while(nrow(rpoints == 0)){rpoints <- st_coordinates(st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE))}
rpoints <- st_coordinates(st_sample(country, size = 1, type = "regular", exact = TRUE, by_polygon = TRUE))
rpoints
spsample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE)
library(sp)
spsample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE)
spsample(country, size = 1, type = "random")
?st_sample
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
rpoints
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon <- rpoints[,"X"]
df$lat <- rpoints[,"Y"]
}
df$Location[i]
country <- world[world$name_long == df$Location[i], 0]
country
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon <- rpoints[,"X"]
df$lat <- rpoints[,"Y"]
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon <- rpoints[,"X"]
df$lat <- rpoints[,"Y"]
}
i
country
rpoints
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon <- rpoints[,"X"]
df$lat <- rpoints[,"Y"]
}
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon <- rpoints[,"X"]
df$lat <- rpoints[,"Y"]
}
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon <- rpoints[,"X"]
df$lat <- rpoints[,"Y"]
}
df
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- rpoints[,"X"]
df$lat[i] <- rpoints[,"Y"]
}
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- rpoints[,"X"]
df$lat[i] <- rpoints[,"Y"]
}
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- rpoints[,"X"]
df$lat[i] <- rpoints[,"Y"]
}
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- rpoints[,"X"]
df$lat[i] <- rpoints[,"Y"]
}
df$lon[i
df$lon[i]
rpoints[,"X"]
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numneric(rpoints[,"X"])
df$lat[i] <- as.numeric(rpoints[,"Y"])
}
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numneic(rpoints[,"X"])
df$lat[i] <- as.numeric(rpoints[,"Y"])
}
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[,"X"])
df$lat[i] <- as.numeric(rpoints[,"Y"])
}
as.numeric(rpoints[,"X"])
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- rpoints[1,"X"]
df$lat[i] <- rpoints[1,"Y"]
}
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
rpoints[1,"X"]
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
as.numeric(rpoints[1,"X"])
as.numeric(rpoints[1,"Y"])
country
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
df
?left_join
left_join(x = data, y = df, by = c("Location" == "Location", "literature" == "literature"))
left_join(x = data, y = df, by = list("Location" == "Location", "literature" == "literature"))
list("Location" == "Location", "literature" == "literature")
left_join(x = data, y = df, by = c("Location" = "Location", "literature" = "literature"))
left_join(x = data, y = df, by = c("Location" = "Location", "literature" = "literature"), copy = TRUE)
left_join(x = data, y = df, by = c("Location" = "Location", "literature" = "literature"), keep = FALSE)
test <- left_join(x = data, y = df, by = c("Location" = "Location", "literature" = "literature"), copy = TRUE, keep = FALSE)
View(test)
View(data)
?replace
dplyr::recode()
?recode
i <- 1
which(data$literature == df$literature[i] & data$Location == df$Location[i])
df[i, c("lon","lat")]
data[vec,c("lon", "lat")]
vec <- which(data$literature == df$literature[i] & data$Location == df$Location[i])
data[vec,c("lon", "lat")]
for(i in 1:nrow(df)){
vec <- which(data$literature == df$literature[i] & data$Location == df$Location[i])
data[vec,c("lon", "lat")] <- df[i, c("lon","lat")]
}
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
for(i in 1:nrow(df)){
vec <- which(data$literature == df$literature[i] & data$Location == df$Location[i])
data[vec,c("lon", "lat")] <- df[i, c("lon","lat")]
}
#random assignment
library(sf)
library(spData)
library(dplyr)
data <- read.csv("./data/Cleaned_Veizer_15_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
for(i in 1:nrow(df)){
vec <- which(data$literature == df$literature[i] & data$Location == df$Location[i])
data[vec,c("lon", "lat")] <- df[i, c("lon","lat")]
}
beepr::beep(2)
write.csv(data, "./data/Cleaned_Veizer_19_02_2021.csv")
beepr::beep(2)
data <- subset(data, comments == "Random assignment")
View(data)
#data prep and clean
######################
#load libraries and functions
library(dplyr)
library(pbapply)
library(chronosphere)
#source("./R/functions/palaeorotate.R")
source("./R/functions/calculate_T.R")
######################
#load data
data <- read.csv("./data/Cleaned_Veizer_19_02_2021.csv")
#remove data without coordinates
data <- subset(data, !is.na(lat) & !is.na(lon))
#calculate temperate
data <- subset(data, !is.na(d18O))
data$temperature <- sapply(1:nrow(data), function(x)
calculate_T(d = data$d18O[x], t = data$gts2012[x], mineral = "calcite",
carbonate_equation = "Veizer trend", apatite_equation = "trend"))
#round age of data
data$rounded_age <- round(data$gts2012)
#palaeorotate coordinates
pm <- fetch("paleomap", "model", datadir="./data/") #download plate model
uniq <- unique(data[,c("lon", "lat", "rounded_age")])
rotations <- data.frame(t(pbsapply(1:nrow(uniq), function(i) {
#coords <- palaeorotate(lng = uniq$lon[i], lat = uniq$lat[i], age = uniq$rounded_age[i])
coords <-   reconstruct(x = uniq[i, c("lon", "lat")], #coordinates of data
age = uniq$rounded_age[i], #age of data
model=pm, #plate model
dir = "./data/", #directory of plate model
path.gplates="C:/Program Files (x86)/GPlates/GPlates 2.2.0/gplates-2.2.0.exe",
cleanup = TRUE,
verbose = FALSE)
files <- list.files("./data/", full.names = TRUE)
files <- files[files != c("./data/Cleaned_Veizer_15_02_2021.csv")]
files <- files[files != c("./data/stage_bins.csv")]
do.call(file.remove, list(files))
coords <- round(coords, digits = 2)
coords
}, simplify = TRUE)))
colnames(rotations) <- c("palaeolng", "palaeolat")
rotations <- cbind.data.frame(uniq, rotations)
data <- plyr::join(x = data, y = rotations, type = "full", by = c("lon" = "lon", "lat" = "lat", "rounded_age" = "rounded_age"), match = "all")
stages <- read.csv("./data/stage_bins.csv")
data$mid_ma <- NA
for(i in 1:nrow(stages)){
vec <- which(data$gts2012 <= stages$max_ma[i] & data$gts2012 >= stages$min_ma[i])
data$mid_ma[vec] <- stages$mid_ma[i]
}
data <- plyr::join(x = data, y = stages, type = "full", by = c("mid_ma"), match = "all")
write.csv(data, "./data/rotated_Veizer_data.csv", row.names = FALSE)
=======
geom_text(data = periods, mapping=aes(x = mid_ma, y = -3.5, label = abbrev), size = 4, colour = "black", alpha=1)  +
geom_ribbon(data = data, mapping = aes(x = mid_ma, y = mean, ymin = min, ymax = max), colour = NA, fill = col[1], size = 0.75, alpha = 0.3) +
geom_line(data = data, mapping=aes(x = mid_ma, y = mean), colour = col[1], size = 1.1, alpha  = 0.75) +
geom_point(data = data, mapping=aes(x = mid_ma, y = mean), colour = col[1], size = 2, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-7, 90)) +
labs(x = "", y = expression(bold(paste("       Absolute \n palaeolatitude (",degree,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 16, face = "bold", vjust = 4),
#axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 16, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
plot_a
#---------------------------------
plot_b <- ggplot() +
#geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -2.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -2.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -7, ymax= 85), linetype = 0, color="grey90", alpha=0.1)  +
#geom_rect(data = periods, mapping=aes(xmin=300, xmax=0, ymin= -3, ymax= 0), linetype = 1, colour = "black", fill="black", alpha=1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -7, ymax = 0), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -3.5, label = abbrev), size = 4, colour = "black", alpha=1)  +
geom_ribbon(data = data, mapping = aes(x = mid_ma, ymin = 0, ymax = occupancy), colour = NA, fill = "grey40") +
geom_ribbon(data = data, mapping = aes(x = mid_ma, ymin = 0, ymax = ODP), colour = NA, fill = "black") +
geom_text(data = NULL, mapping=aes(x = 400, y = 75, label = "Terrestrial"), fontface = "bold", size = 4, colour = "grey40", alpha=1)  +
geom_text(data = NULL, mapping=aes(x = 60, y = 75, label = "Ocean drilling"), fontface = "bold", size = 4, colour = "black", alpha=1)  +
#geom_line(data = data, mapping=aes(x = mid_ma, y = occupancy), colour = col[1], size = 1.1, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-7, 85)) +
labs(x = "", y = expression(bold(paste("Occuppied equal \n    area grid cells")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 1),
axis.title.y = element_text(size = 16, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 16, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
plot_b
#---------------------------------
plot_c <- ggplot() +
#geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -3000, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -3000, yend = Inf), linetype = 2, size = 1, color = "grey90") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -5, ymax= Inf), linetype = 0, color="grey90", alpha=0.1)  +
#geom_rect(data = periods, mapping=aes(xmin=300, xmax=0, ymin= -2600, ymax= 0), linetype = 1, colour = "black", fill="black", alpha=1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -5, ymax = 0), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -2.5, label = abbrev), size = 4, colour = "black", alpha=1)  +
geom_line(data = data, mapping=aes(x = mid_ma, y = MST), colour = col[1], size = 1.1, alpha  = 0.75) +
geom_point(data = data, mapping=aes(x = mid_ma, y = MST), colour = col[1], size = 2, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-5, 60)) +
labs(x = "Time (Ma)", y = expression(bold(paste("Summed MST length \n   (thousands of km)")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 1),
axis.title.y = element_text(size = 16, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 16, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
plot_c
#---------------------------------
plots <- ggarrange(plot_a, plot_b, plot_c, ncol=1, nrow=3, widths = c(1,1,1), labels = "AUTO", align = "v", font.label = list(size = 20))
#plots
ggsave(file = "./figures/spatial_stats.png", plot = plots, width = 117, height = 180, units = "mm", dpi = 600, scale = 1.6)
#unlink("./figures/spatial_stats.png")
#spatial statistics plot
#---------------------------------
library(ggplot2)
library(ggpubr)
#---------------------------------
#plot style
#get stages
stages <- read.csv("https://paleobiodb.org/data1.2/intervals/list.txt?scale_id=1&scale_level=5")
#get periods
periods <- read.csv("https://paleobiodb.org/data1.2/intervals/list.txt?scale_id=1&scale_level=3")
periods$mid_ma <- (periods$max_ma+periods$min_ma)/2
periods$color <- "white"
#shading data
s <- seq(2, nrow(periods), 2)
throwing_shade <- periods[s,]
#define colours for plots
col <- c("black")
#---------------------------------
#read data
data <- read.csv("./results/spatial_stats/stage_level_spatial_stats.csv")
#data$lower[which(data$min < 0)] <- 0
data$MST <- data$MST/1000
plot_a <- ggplot() +
#geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -4.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -4.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -7, ymax= Inf), linetype = 0, color="grey90", alpha=0.1)  +
#geom_rect(data = periods, mapping=aes(xmin=300, xmax=0, ymin= -6, ymax= 0), linetype = 1, colour = "black", fill="black", alpha=1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -7, ymax = 0), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -3.5, label = abbrev), size = 4, colour = "black", alpha=1)  +
geom_ribbon(data = data, mapping = aes(x = mid_ma, y = mean, ymin = min, ymax = max), colour = NA, fill = col[1], size = 0.75, alpha = 0.3) +
geom_line(data = data, mapping=aes(x = mid_ma, y = mean), colour = col[1], size = 1.1, alpha  = 0.75) +
geom_point(data = data, mapping=aes(x = mid_ma, y = mean), colour = col[1], size = 2, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-7, 90)) +
labs(x = "", y = expression(bold(paste("       Absolute \n palaeolatitude (",degree,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 16, face = "bold", vjust = 4),
#axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 16, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
plot_a
#---------------------------------
plot_b <- ggplot() +
#geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -2.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -2.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -7, ymax= 85), linetype = 0, color="grey90", alpha=0.1)  +
#geom_rect(data = periods, mapping=aes(xmin=300, xmax=0, ymin= -3, ymax= 0), linetype = 1, colour = "black", fill="black", alpha=1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -7, ymax = 0), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -3.5, label = abbrev), size = 4, colour = "black", alpha=1)  +
geom_ribbon(data = data, mapping = aes(x = mid_ma, ymin = 0, ymax = occupancy), colour = NA, fill = "grey40") +
geom_ribbon(data = data, mapping = aes(x = mid_ma, ymin = 0, ymax = ODP), colour = NA, fill = "black") +
geom_text(data = NULL, mapping=aes(x = 400, y = 75, label = "Terrestrial"), fontface = "bold", size = 4, colour = "grey40", alpha=1)  +
geom_text(data = NULL, mapping=aes(x = 60, y = 75, label = "Ocean drilling"), fontface = "bold", size = 4, colour = "black", alpha=1)  +
#geom_line(data = data, mapping=aes(x = mid_ma, y = occupancy), colour = col[1], size = 1.1, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-7, 85)) +
labs(x = "", y = expression(bold(paste("Occuppied equal \n area grid cells")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 1),
axis.title.y = element_text(size = 16, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 16, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
plot_b
#---------------------------------
plot_c <- ggplot() +
#geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -3000, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -3000, yend = Inf), linetype = 2, size = 1, color = "grey90") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -5, ymax= Inf), linetype = 0, color="grey90", alpha=0.1)  +
#geom_rect(data = periods, mapping=aes(xmin=300, xmax=0, ymin= -2600, ymax= 0), linetype = 1, colour = "black", fill="black", alpha=1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -5, ymax = 0), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -2.5, label = abbrev), size = 4, colour = "black", alpha=1)  +
geom_line(data = data, mapping=aes(x = mid_ma, y = MST), colour = col[1], size = 1.1, alpha  = 0.75) +
geom_point(data = data, mapping=aes(x = mid_ma, y = MST), colour = col[1], size = 2, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-5, 60)) +
labs(x = "Time (Ma)", y = expression(bold(paste("Summed MST length \n (thousands of km)")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 1),
axis.title.y = element_text(size = 16, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 16, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
plot_c
#---------------------------------
plots <- ggarrange(plot_a, plot_b, plot_c, ncol=1, nrow=3, widths = c(1,1,1), labels = "AUTO", align = "v", font.label = list(size = 20))
#plots
ggsave(file = "./figures/spatial_stats.png", plot = plots, width = 117, height = 180, units = "mm", dpi = 600, scale = 1.6)
#unlink("./figures/spatial_stats.png")
#spatial statistics plot
#---------------------------------
library(ggplot2)
library(ggpubr)
#---------------------------------
#plot style
#get stages
stages <- read.csv("https://paleobiodb.org/data1.2/intervals/list.txt?scale_id=1&scale_level=5")
#get periods
periods <- read.csv("https://paleobiodb.org/data1.2/intervals/list.txt?scale_id=1&scale_level=3")
periods$mid_ma <- (periods$max_ma+periods$min_ma)/2
periods$color <- "white"
#shading data
s <- seq(2, nrow(periods), 2)
throwing_shade <- periods[s,]
#define colours for plots
col <- c("black")
#---------------------------------
#read data
data <- read.csv("./results/spatial_stats/stage_level_spatial_stats.csv")
#data$lower[which(data$min < 0)] <- 0
data$MST <- data$MST/1000
plot_a <- ggplot() +
#geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -4.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -4.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -7, ymax= Inf), linetype = 0, color="grey90", alpha=0.1)  +
#geom_rect(data = periods, mapping=aes(xmin=300, xmax=0, ymin= -6, ymax= 0), linetype = 1, colour = "black", fill="black", alpha=1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -7, ymax = 0), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -3.5, label = abbrev), size = 4, colour = "black", alpha=1)  +
geom_ribbon(data = data, mapping = aes(x = mid_ma, y = mean, ymin = min, ymax = max), colour = NA, fill = col[1], size = 0.75, alpha = 0.3) +
geom_line(data = data, mapping=aes(x = mid_ma, y = mean), colour = col[1], size = 1.1, alpha  = 0.75) +
geom_point(data = data, mapping=aes(x = mid_ma, y = mean), colour = col[1], size = 2, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-7, 90)) +
labs(x = "", y = expression(bold(paste("       Absolute \n palaeolatitude (",degree,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 16, face = "bold", vjust = 4),
#axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 16, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
plot_a
#---------------------------------
plot_b <- ggplot() +
#geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -2.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -2.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -7, ymax= 85), linetype = 0, color="grey90", alpha=0.1)  +
#geom_rect(data = periods, mapping=aes(xmin=300, xmax=0, ymin= -3, ymax= 0), linetype = 1, colour = "black", fill="black", alpha=1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -7, ymax = 0), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -3.5, label = abbrev), size = 4, colour = "black", alpha=1)  +
geom_ribbon(data = data, mapping = aes(x = mid_ma, ymin = 0, ymax = occupancy), colour = NA, fill = "grey40") +
geom_ribbon(data = data, mapping = aes(x = mid_ma, ymin = 0, ymax = ODP), colour = NA, fill = "black") +
geom_text(data = NULL, mapping=aes(x = 400, y = 75, label = "Terrestrial"), fontface = "bold", size = 4, colour = "grey40", alpha=1)  +
geom_text(data = NULL, mapping=aes(x = 60, y = 75, label = "Ocean drilling"), fontface = "bold", size = 4, colour = "black", alpha=1)  +
#geom_line(data = data, mapping=aes(x = mid_ma, y = occupancy), colour = col[1], size = 1.1, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-7, 85)) +
labs(x = "", y = expression(bold(paste("Occuppied equal- \n area grid cells")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 1),
axis.title.y = element_text(size = 16, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 16, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
plot_b
#---------------------------------
plot_c <- ggplot() +
#geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -3000, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -3000, yend = Inf), linetype = 2, size = 1, color = "grey90") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -5, ymax= Inf), linetype = 0, color="grey90", alpha=0.1)  +
#geom_rect(data = periods, mapping=aes(xmin=300, xmax=0, ymin= -2600, ymax= 0), linetype = 1, colour = "black", fill="black", alpha=1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -5, ymax = 0), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -2.5, label = abbrev), size = 4, colour = "black", alpha=1)  +
geom_line(data = data, mapping=aes(x = mid_ma, y = MST), colour = col[1], size = 1.1, alpha  = 0.75) +
geom_point(data = data, mapping=aes(x = mid_ma, y = MST), colour = col[1], size = 2, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-5, 60)) +
labs(x = "Time (Ma)", y = expression(bold(paste("Summed MST length \n  (thousands of km)")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 1),
axis.title.y = element_text(size = 16, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 16, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
plot_c
#---------------------------------
plots <- ggarrange(plot_a, plot_b, plot_c, ncol=1, nrow=3, widths = c(1,1,1), labels = "AUTO", align = "v", font.label = list(size = 20))
#plots
ggsave(file = "./figures/spatial_stats.png", plot = plots, width = 117, height = 180, units = "mm", dpi = 600, scale = 1.6)
#unlink("./figures/spatial_stats.png")
#spatial statistics plot
#---------------------------------
library(ggplot2)
library(ggpubr)
#---------------------------------
#plot style
#get stages
stages <- read.csv("https://paleobiodb.org/data1.2/intervals/list.txt?scale_id=1&scale_level=5")
#get periods
periods <- read.csv("https://paleobiodb.org/data1.2/intervals/list.txt?scale_id=1&scale_level=3")
periods$mid_ma <- (periods$max_ma+periods$min_ma)/2
periods$color <- "white"
#shading data
s <- seq(2, nrow(periods), 2)
throwing_shade <- periods[s,]
#define colours for plots
col <- c("black")
#---------------------------------
#read data
data <- read.csv("./results/spatial_stats/stage_level_spatial_stats.csv")
#data$lower[which(data$min < 0)] <- 0
data$MST <- data$MST/1000
plot_a <- ggplot() +
#geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -4.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -4.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -7, ymax= Inf), linetype = 0, color="grey90", alpha=0.1)  +
#geom_rect(data = periods, mapping=aes(xmin=300, xmax=0, ymin= -6, ymax= 0), linetype = 1, colour = "black", fill="black", alpha=1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -7, ymax = 0), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -3.5, label = abbrev), size = 4, colour = "black", alpha=1)  +
geom_ribbon(data = data, mapping = aes(x = mid_ma, y = mean, ymin = min, ymax = max), colour = NA, fill = col[1], size = 0.75, alpha = 0.3) +
geom_line(data = data, mapping=aes(x = mid_ma, y = mean), colour = col[1], size = 1.1, alpha  = 0.75) +
geom_point(data = data, mapping=aes(x = mid_ma, y = mean), colour = col[1], size = 2, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-7, 90)) +
labs(x = "", y = expression(bold(paste("       Absolute \n palaeolatitude (",degree,")")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 0),
axis.title.y = element_text(size = 16, face = "bold", vjust = 4),
#axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 16, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
plot_a
#---------------------------------
plot_b <- ggplot() +
#geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -2.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -2.5, yend = Inf), linetype = 2, size = 1, color = "grey90") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -7, ymax= 85), linetype = 0, color="grey90", alpha=0.1)  +
#geom_rect(data = periods, mapping=aes(xmin=300, xmax=0, ymin= -3, ymax= 0), linetype = 1, colour = "black", fill="black", alpha=1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -7, ymax = 0), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -3.5, label = abbrev), size = 4, colour = "black", alpha=1)  +
geom_ribbon(data = data, mapping = aes(x = mid_ma, ymin = 0, ymax = occupancy), colour = NA, fill = "grey40") +
geom_ribbon(data = data, mapping = aes(x = mid_ma, ymin = 0, ymax = ODP), colour = NA, fill = "black") +
geom_text(data = NULL, mapping=aes(x = 400, y = 75, label = "Terrestrial"), fontface = "bold", size = 4, colour = "grey40", alpha=1)  +
geom_text(data = NULL, mapping=aes(x = 60, y = 75, label = "Ocean drilling"), fontface = "bold", size = 4, colour = "black", alpha=1)  +
#geom_line(data = data, mapping=aes(x = mid_ma, y = occupancy), colour = col[1], size = 1.1, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-7, 85)) +
labs(x = "", y = expression(bold(paste("Occuppied equal- \n  area grid cells")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 1),
axis.title.y = element_text(size = 16, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 16, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
plot_b
#---------------------------------
plot_c <- ggplot() +
#geom_segment(data = periods, mapping=aes(x = min_ma, xend = min_ma, y = -3000, yend = Inf), linetype = 2, size = 1, color = "grey90") +
#geom_segment(data = periods, mapping=aes(x = max_ma, xend = max_ma, y = -3000, yend = Inf), linetype = 2, size = 1, color = "grey90") +
geom_rect(data = throwing_shade, mapping=aes(xmin=min_ma, xmax=max_ma, ymin = -5, ymax= Inf), linetype = 0, color="grey90", alpha=0.1)  +
#geom_rect(data = periods, mapping=aes(xmin=300, xmax=0, ymin= -2600, ymax= 0), linetype = 1, colour = "black", fill="black", alpha=1)  +
geom_rect(data = periods, mapping=aes(xmin = min_ma, xmax = max_ma, ymin = -5, ymax = 0), linetype = 1, colour = "black", fill=periods$color, alpha=1)  +
geom_text(data = periods, mapping=aes(x = mid_ma, y = -2.5, label = abbrev), size = 4, colour = "black", alpha=1)  +
geom_line(data = data, mapping=aes(x = mid_ma, y = MST), colour = col[1], size = 1.1, alpha  = 0.75) +
geom_point(data = data, mapping=aes(x = mid_ma, y = MST), colour = col[1], size = 2, alpha  = 0.75) +
scale_x_reverse(expand=c(0,0), limits = c(541, 0)) +
scale_y_continuous(expand=c(0,0), limits = c(-5, 60)) +
labs(x = "Time (Ma)", y = expression(bold(paste("Summed MST length \n  (thousands of km)")))) +
theme(panel.background = element_blank(),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"),
#panel.grid.minor.y = element_line(colour = "grey90"),
#panel.grid.minor.x = element_line(colour = "grey90"),
#panel.grid.major.y = element_line(colour = "grey90"),
#panel.grid.major.x = element_line(colour = "grey90"),
legend.position = c(0.2, 0.9),
legend.background = element_blank(),
legend.box.background = element_rect(colour = NA, fill = NA),
legend.key = element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.margin=unit(0, "cm"),
panel.border = element_rect(colour = "black", fill = NA),
axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
axis.text.y = element_text(size = 14, angle = 0, hjust = 1),
axis.title.y = element_text(size = 16, face = "bold", vjust = 4),
axis.title.y.right = element_text(size = 14, face = "bold", vjust = 4),
axis.title.x = element_text(size = 16, face = "bold", vjust = -1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
aspect.ratio = 0.5)
plot_c
#---------------------------------
plots <- ggarrange(plot_a, plot_b, plot_c, ncol=1, nrow=3, widths = c(1,1,1), labels = "AUTO", align = "v", font.label = list(size = 20))
#plots
ggsave(file = "./figures/spatial_stats.png", plot = plots, width = 117, height = 180, units = "mm", dpi = 600, scale = 1.6)
#unlink("./figures/spatial_stats.png")
>>>>>>> Stashed changes
