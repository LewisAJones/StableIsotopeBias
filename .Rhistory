rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
i <- 22
country <- world[world$name_long == df$Location[i], 0]
world$name_long
data <- read.csv("./data/Cleaned_Veizer_19_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
i
plot(country)
df$Location[i]
plot(world)
plot(world$continent)
plot(world)
country <- world[world$name_long == df$Location[i], 0]
spsample(country, n = 1, "random")
library(sp)
spsample(country, n = 1, "random")
?spsample
country
SpatialPolygons(country)
test <- as_Spatial(country)
spsample(test, n = 1, "random")
country <- as_Spatial(country)
spsample(country, n = 1, "random")
spsample(country, n = 1, "random", pretty = TRUE)
spsample(country, n = 100, "random", pretty = TRUE)
test <- spsample(country, n = 100, "random", pretty = TRUE)
test
st_coordinates(test)
as.data.frame(test)
as.data.frame(spsample(country, n = 100, "random", pretty = TRUE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
plot(country)
i <- 9
country <- world[world$name_long == df$Location[i], 0]
df$Location[i]
country <- as_Spatial(country)
test <- as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
test
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 1, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
#random assignment
library(sf)
library(spData)
library(dplyr)
library(sp)
data <- read.csv("./data/Cleaned_Veizer_19_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
country <- as_Spatial(country)
rpoints <- as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
df$lon[i] <- as.numeric(rpoints[1,"X"])
df$lat[i] <- as.numeric(rpoints[1,"Y"])
}
rpoints
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
#df$lon[i] <- as.numeric(rpoints[1,"X"])
#df$lat[i] <- as.numeric(rpoints[1,"Y"])
country <- as_Spatial(country)
rpoints <- as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
df$lon[i] <- as.numeric(rpoints[1,"x"])
df$lat[i] <- as.numeric(rpoints[1,"y"])
}
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
#df$lon[i] <- as.numeric(rpoints[1,"X"])
#df$lat[i] <- as.numeric(rpoints[1,"Y"])
country <- as_Spatial(country)
rpoints <- as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
df$lon[i] <- as.numeric(rpoints[1,"x"])
df$lat[i] <- as.numeric(rpoints[1,"y"])
}
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
#df$lon[i] <- as.numeric(rpoints[1,"X"])
#df$lat[i] <- as.numeric(rpoints[1,"Y"])
country <- as_Spatial(country)
rpoints <- as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
df$lon[i] <- as.numeric(rpoints[1,"x"])
df$lat[i] <- as.numeric(rpoints[1,"y"])
}
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
#df$lon[i] <- as.numeric(rpoints[1,"X"])
#df$lat[i] <- as.numeric(rpoints[1,"Y"])
country <- as_Spatial(country)
rpoints <- as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
df$lon[i] <- as.numeric(rpoints[1,"x"])
df$lat[i] <- as.numeric(rpoints[1,"y"])
}
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
#df$lon[i] <- as.numeric(rpoints[1,"X"])
#df$lat[i] <- as.numeric(rpoints[1,"Y"])
country <- as_Spatial(country)
rpoints <- as.data.frame(spsample(country, n = 100, "random", pretty = FALSE))
df$lon[i] <- as.numeric(rpoints[1,"x"])
df$lat[i] <- as.numeric(rpoints[1,"y"])
}
warnings*()
warnings()
?spsample
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
#df$lon[i] <- as.numeric(rpoints[1,"X"])
#df$lat[i] <- as.numeric(rpoints[1,"Y"])
country <- as_Spatial(country)
rpoints <- as.data.frame(suppressWarnings(spsample(country, n = 100, "random", pretty = FALSE)))
df$lon[i] <- as.numeric(rpoints[1,"x"])
df$lat[i] <- as.numeric(rpoints[1,"y"])
}
View(df)
View(df)
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
#df$lon[i] <- as.numeric(rpoints[1,"X"])
#df$lat[i] <- as.numeric(rpoints[1,"Y"])
country <- as_Spatial(country)
rpoints <- as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
df$lon[i] <- as.numeric(rpoints[1,"x"])
df$lat[i] <- as.numeric(rpoints[1,"y"])
}
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
#df$lon[i] <- as.numeric(rpoints[1,"X"])
#df$lat[i] <- as.numeric(rpoints[1,"Y"])
country <- as_Spatial(country)
rpoints <- as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
df$lon[i] <- as.numeric(rpoints[1,"x"])
df$lat[i] <- as.numeric(rpoints[1,"y"])
}
#random assignment
library(sf)
library(spData)
library(dplyr)
library(sp)
data <- read.csv("./data/Cleaned_Veizer_19_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
#df$lon[i] <- as.numeric(rpoints[1,"X"])
#df$lat[i] <- as.numeric(rpoints[1,"Y"])
country <- as_Spatial(country)
rpoints <- as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
df$lon[i] <- as.numeric(rpoints[1,"x"])
df$lat[i] <- as.numeric(rpoints[1,"y"])
}
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
#df$lon[i] <- as.numeric(rpoints[1,"X"])
#df$lat[i] <- as.numeric(rpoints[1,"Y"])
country <- as_Spatial(country)
rpoints <- as.data.frame(suppressWarnings(spsample(country, n = 100, "random", pretty = FALSE)))
df$lon[i] <- as.numeric(rpoints[1,"x"])
df$lat[i] <- as.numeric(rpoints[1,"y"])
}
suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE))
as.vector(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
rpoints <- as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
df$lon[i] <- as.numeric(rpoints[1,"x"])
df$lat[i] <- as.numeric(rpoints[1,"y"])
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
#df$lon[i] <- as.numeric(rpoints[1,"X"])
#df$lat[i] <- as.numeric(rpoints[1,"Y"])
country <- as_Spatial(country)
rpoints <- as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
df$lon[i] <- as.numeric(rpoints[1,"x"])
df$lat[i] <- as.numeric(rpoints[1,"y"])
}
#random assignment
library(sf)
library(spData)
library(dplyr)
library(sp)
data <- read.csv("./data/Cleaned_Veizer_19_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
#df$lon[i] <- as.numeric(rpoints[1,"X"])
#df$lat[i] <- as.numeric(rpoints[1,"Y"])
country <- as_Spatial(country)
rpoints <- as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
df$lon[i] <- as.numeric(rpoints[1,"x"])
df$lat[i] <- as.numeric(rpoints[1,"y"])
}
as.numeric(rpoints[1,"x"])
rpoints
rpoints <- as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
rpoints
rpoints <- as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
rpoints
as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
data <- read.csv("./data/Cleaned_Veizer_19_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df$lon <- NA
df$lat <- NA
for(i in 1:nrow(df)){
country <- world[world$name_long == df$Location[i], 0]
#rpoints <- st_coordinates(st_sample(country, size = 100, type = "random", exact = TRUE, by_polygon = TRUE))
#df$lon[i] <- as.numeric(rpoints[1,"X"])
#df$lat[i] <- as.numeric(rpoints[1,"Y"])
country <- as_Spatial(country)
rpoints <- as.data.frame(suppressWarnings(spsample(country, n = 1, "random", pretty = FALSE)))
df$lon[i] <- as.numeric(rpoints[1,1])
df$lat[i] <- as.numeric(rpoints[1,2])
}
df
data <- read.csv("./data/Cleaned_Veizer_19_02_2021.csv")
df <- subset(data, comments == "Random assignment")
df <- df[,c("literature", "Location")]
df <- unique(df)
df
#run analyses
source("./R/subscripts/spatial_stats.R")
rm(list = ls())
source("./R/subscripts/get_sst_data.R")
rm(list = ls())
source("./R/subscripts/get_binned_vals.R")
rm(list = ls())
######################
#read data
data <- read.csv("./data/rotated_Veizer_data.csv")
#figures
source("./R/figures/spatial_stats.R")
rm(list = ls())
source("./R/figures/spatial_stats_10myr.R")
rm(list = ls())
source("./R/figures/sst_plot.R")
rm(list = ls())
source("./R/figures/sst_plot_10myr.R")
rm(list = ls())
source("./R/figures/lat_temp_plot.R")
rm(list = ls())
source("./R/figures/map_plots_raster.R")
rm(list = ls())
source("./R/figures/aptian_plot.R")
rm(list = ls())
source("./R/figures/centroid_histogram.R")
rm(list = ls())
source("./R/figures/linear_models.R")
rm(list = ls())
source("./R/figures/continent_terrestrial_plot.R")
rm(list = ls())
#---------------------------------
#read data
data <- read.csv("./results/spatial_stats/stage_level_spatial_stats.csv")
mean(data$Median)
mean(data$Median, na.rm = TRUE)
sd(data$Median, na.rm = TRUE)
######################
#read data
data <- read.csv("./data/rotated_Veizer_data.csv")
mean(data$palaeolat)
mean(data$palaeolat, na.rm = TRUE)
#---------------------------------
#read data
data <- read.csv("./results/spatial_stats/stage_level_spatial_stats.csv")
range(data$Median)
range(data$Median, na.rm = TRUE)
max(data$Median, na.rm = TRUE)
min(data$Median, na.rm = TRUE)
min(data$Median, na.rm = TRUE) - max(data$Median, na.rm = TRUE)
View(data)
(data$Max - data$Min)
mean(data$Max - data$Min, na.rm = TRUE)
sd(data$Max - data$Min, na.rm = TRUE)
View(data)
data[50:97,]
data[50:97, c("Median")]
mean(data[50:97, c("Median")])
mean(data[50:97, c("Median")], na.rm = TRUE)
sd(data[50:97, c("Median")], na.rm = TRUE)
mean(data[1:49, c("Median")], na.rm = TRUE)
sd(data[1:49, c("Median")], na.rm = TRUE)
?t.test()
t.test(x = data[1:49, c("Median")], x = data[50:97, c("Median")])
t.test(x = data[1:49, c("Median")], y = data[50:97, c("Median")])
t.test(x = data[1:49, c("Median")], y = data[50:97, c("Median")], alternative = "greater")
25.430 - 2.560
mean(data[1:26, c("Median")], na.rm = TRUE)
mean((data[1:26, c("Max")] - data[1:26, c("Min")]), na.rm = TRUE)
sd((data[1:26, c("Max")] - data[1:26, c("Min")]), na.rm = TRUE)
mean((data[27:97, c("Max")] - data[27:97, c("Min")]), na.rm = TRUE)
sd((data[27:97, c("Max")] - data[27:97, c("Min")]), na.rm = TRUE)
mean(data[,c("occupancy")], na.rm = TRUE)
sd(data[,c("occupancy")], na.rm = TRUE)
which.max(data[,c("occupancy")], na.rm = TRUE)
which.max(data[,c("occupancy")])
data[20,c("occupancy")]
data[20]
data[20,]
mean(data$MST, na.rm = TRUE)
sd(data$MST, na.rm = TRUE)
#---------------------------------
#read data
data <- read.csv("./results/SST/extracted_temp.csv")
stage_vals <- read.csv("./results/SST/stage_binned_vals.csv")
View(stage_vals)
sum(stage_vals$ext_temperature_stage_modern > temperature_stage)
sum(stage_vals$ext_temperature_stage_modern > 17.84)
sum(stage_vals$ext_temperature_stage_modern > 17.84, na.rm = TRUE)
sum(stage_vals$ext_temperature_stage_eocene > 27.58, na.rm = TRUE)
#linear model plot
#---------------------------------
library(ggplot2)
library(ggpubr)
#---------------------------------
#plot style
#get stages
stages <- read.csv("https://paleobiodb.org/data1.2/intervals/list.txt?scale_id=1&scale_level=5")
#get periods
periods <- read.csv("https://paleobiodb.org/data1.2/intervals/list.txt?scale_id=1&scale_level=3")
periods$mid_ma <- (periods$max_ma+periods$min_ma)/2
#shading data
s <- seq(2, nrow(periods), 2)
throwing_shade <- periods[s,]
periods$color <- "white"
#define colours for plots
col <- c("black")
#---------------------------------
#read data
spat <- read.csv("./results/spatial_stats/stage_level_spatial_stats.csv")
# temperature stage-level
temp <- read.csv("./results/SST/stage_binned_vals.csv")
spat$temp <- temp$temperature_stage
spat <- subset(spat, !is.na(temp))
x <- diff(rev(spat$Median))
y <- diff(rev(spat$temp))
names <- rev(spat$interval_name[1:87])
stagecol <- rev(spat$color[1:87])
jpeg("./figures/linear_models.jpg", width = 230, height = 110, res = 300, units = "mm")
par(mfrow = c(1,2), mar = c(4.5,4.5,1,1), mgp = c(2.25,0.75,0), las = 1)
df <- cbind.data.frame(x, y, names, stagecol)
olm <- lm(y ~ x, data = df)
lm_coef <- list(pval = round(summary(olm)$coefficients[8], digits = 3),
r2 = round(summary(olm)$r.squared, digits = 3));
if(lm_coef$pval <= 0.000){
lm_coef$pval <- c("< 0.001")
}
newx = seq(min(df$x),max(df$x),by = 0.05)
conf_interval <- predict(olm, newdata=data.frame(x=newx), interval="confidence",
level = 0.95)
plot(df$x,df$y, xlab = expression(Delta~"Absolute palaeolatitudinal median ("*degree*")"),
ylab = expression(Delta~"Global mean temperature ( "*degree~"C) "), main = "", pch = 21, bg = df$stagecol, cex = 1.5,
type = "n", cex.lab = 1.2, cex.axis = 0.85) #xlim = c(min(x)-1,max(x)+1))
# plot points
points(df$x,df$y, pch = 21, bg = df$stagecol, cex = 1.2, xpd = T)
abline(lm(df$y~df$x), lwd = 2)
lines(newx, conf_interval[,2], col="red", lty=2, lwd = 2)
lines(newx, conf_interval[,3], col="red", lty=2, lwd = 2)
#
# Add text with R2 and p
text(-30,14, substitute(~~italic(R)^2~"="~r2~","~~italic(P)~"="~pval, lm_coef), cex = 1)
#
# add line segments
#
# Add "A"
text(-90,16,expression(bold("A")),xpd = T, cex = 1.5)
df1 <- subset(df, names != "Olenekian")
df1 <- subset(df1, names != "Anisian")
olm <- lm(y ~ x, data = df1)
lm_coef <- list(pval = round(summary(olm)$coefficients[8], digits = 3),
r2 = round(summary(olm)$r.squared, digits = 3));
if(lm_coef$pval <= 0.000){
lm_coef$pval <- c("< 0.001")
}
newx = seq(min(df1$x),max(df1$x),by = 0.05)
conf_interval <- predict(olm, newdata=data.frame(x=newx), interval="confidence",
level = 0.95)
plot(df$x,df$y, xlab = expression(Delta~"Absolute palaeolatitudinal median ("*degree*")"),
ylab = expression(Delta~"Global mean temperature ( "*degree~"C) "), main = "", pch = 21, bg = df$stagecol, cex = 1.5,
type = "n", cex.lab = 1.2, cex.axis = 0.85) #xlim = c(min(x)-1,max(x)+1))
# plot points
points(df1$x,df1$y, pch = 21, bg = df1$stagecol, cex = 1.2, xpd = T)
points(df$x[40:41],df$y[40:41], pch = 4, cex = 1.2, xpd = T)
abline(lm(df1$y~df1$x), lwd = 2)
lines(newx, conf_interval[,2], col="red", lty=2, lwd = 2)
lines(newx, conf_interval[,3], col="red", lty=2, lwd = 2)
#
# Add text with R2 and p
text(-27,14, substitute(~~italic(R)^2~"="~r2~","~~italic(P)~"="~pval, lm_coef), cex = 1)
#
# add line segments
#
# Add "A"
text(-90,16,expression(bold("B")),xpd = T, cex = 1.5)
dev.off()
